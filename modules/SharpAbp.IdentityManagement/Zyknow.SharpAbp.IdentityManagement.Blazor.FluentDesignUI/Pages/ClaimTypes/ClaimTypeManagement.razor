@page "/identity/claim-types"
@using IdentityPermissions = global::SharpAbp.Abp.Identity.IdentityPermissions
@attribute [Authorize(IdentityPermissions.IdentityClaimTypes.Default)]
@using global::SharpAbp.Abp.Identity
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Volo.Abp.Application.Dtos
@using Volo.Abp.ObjectExtending
@using Zyknow.Abp.AspnetCore.Components.Web.FluentDesignTheme.PageToolbars
@inherits AbpCustomCrudMethodPageBase<IIdentityClaimTypeAppService, IdentityClaimTypeDto, Guid, IdentityClaimTypePagedRequestDto, CreateIdentityClaimTypeDto, UpdateIdentityClaimTypeDto>

<FluentAdaptiveCard>
    <AbpPageHeader Title="@L["IdentityClaimTypes"]" BreadcrumbItems="@BreadcrumbItems" Toolbar="@Toolbar"/>

    <AbpSearch Loading="@Loading" @bind-PrimarySearchValue="GetListInput.Filter"
               OnSearch="SearchEntitiesAsync"></AbpSearch>

    <AbpExtensibleDataGrid Loading="@Loading"
                           TKey="Guid"
                           TItem="IdentityClaimTypeDto"
                           EnableSelected="true"
                           PrimarySelectedDeletesBtnVisible="@HasDeletePermission"
                           OnDeleteSelected="DeleteEntitiesAsync"
                           DeleteSelectedDisplayPropertyConfirmExpression="@(r => r.Name)"
                           Entities="Entities"
                           OnChange="@OnDataGridReadAsync"
                           Pagination="@Pagination"
                           Columns="@ClaimTypeManagementTableColumns">
    </AbpExtensibleDataGrid>
</FluentAdaptiveCard>

@code {
    protected PageToolbar Toolbar { get; } = new();
    protected List<FluentTableColumn> ClaimTypeManagementTableColumns => TableColumns.Get<ClaimTypeManagement>();

    protected string EditName { get; set; }

    public ClaimTypeManagement()
    {
        LocalizationResource = typeof(IdentityResource);

        CreatePolicyName = IdentityPermissions.IdentityClaimTypes.Create;
        UpdatePolicyName = IdentityPermissions.IdentityClaimTypes.Update;
        DeletePolicyName = IdentityPermissions.IdentityClaimTypes.Delete;
    }

    protected override ValueTask SetBreadcrumbItemsAsync()
    {
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["Menu:IdentityManagement"]));
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["IdentityClaimTypes"]));

        return base.SetBreadcrumbItemsAsync();
    }

    protected override string GetDeleteConfirmationMessage(IdentityClaimTypeDto entity)
    {
        return string.Format(L["IdentityClaimTypeDeletionConfirmationMessage"], entity.Name);
    }

    protected override ValueTask SetToolbarItemsAsync()
    {
        Toolbar.AddButton(L["CreateIdentityClaimType"],
            OpenCreateDialogAsync,
            new Size20.Add(),
            requiredPolicyName: CreatePolicyName);

        return base.SetToolbarItemsAsync();
    }

    protected override ValueTask SetEntityActionsAsync()
    {
        EntityActions
            .Get<ClaimTypeManagement>()
            .AddRange([
                new FluentEntityAction
                {
                    Text = L["Edit"],
                    Visible = (data) => HasUpdatePermission,
                    Clicked = async (data) => { await OpenEditDialogAsync(data.As<IdentityClaimTypeDto>()); }
                },
                new FluentEntityAction
                {
                    Text = L["Delete"],
                    Color = "red",
                    Visible = (data) => HasDeletePermission,
                    Clicked = async (data) => await DeleteEntityAsync(data.As<IdentityClaimTypeDto>()),
                    ConfirmationMessage = (data) => GetDeleteConfirmationMessage(data.As<IdentityClaimTypeDto>())
                }
            ]);

        return base.SetEntityActionsAsync();
    }

    protected override ValueTask SetTableColumnsAsync()
    {
        ClaimTypeManagementTableColumns
            .AddRange([
                new FluentTableColumn
                {
                    Title = L["IdentityClaimType:Name"],
                    Sortable = true,
                    Data = nameof(IdentityClaimTypeDto.Name),
                    PropertyName = nameof(IdentityClaimTypeDto.Name)
                },
                new FluentTableColumn
                {
                    Title = L["IdentityClaimType:ValueType"],
                    Sortable = true,
                    Data = nameof(IdentityClaimTypeDto.ValueType),
                    PropertyName = nameof(IdentityClaimTypeDto.ValueType)
                },
                new FluentTableColumn
                {
                    Title = L["IdentityClaimType:Regex"],
                    Sortable = true,
                    Data = nameof(IdentityClaimTypeDto.Regex),
                    PropertyName = nameof(IdentityClaimTypeDto.Regex),
                    Visible = false
                },
                new FluentTableColumn
                {
                    Title = L["IdentityClaimType:RegexDescription"],
                    Sortable = true,
                    Data = nameof(IdentityClaimTypeDto.RegexDescription),
                    PropertyName = nameof(IdentityClaimTypeDto.RegexDescription),
                    Visible = false
                },
                new FluentTableColumn
                {
                    Title = L["IdentityClaimType:Description"],
                    Sortable = true,
                    Data = nameof(IdentityClaimTypeDto.Description),
                    PropertyName = nameof(IdentityClaimTypeDto.Description)
                },
                new FluentTableColumn
                {
                    Title = L["IdentityClaimType:Required"],
                    Sortable = true,
                    IsCheckIcon = true,
                    Data = nameof(IdentityClaimTypeDto.Required),
                    PropertyName = nameof(IdentityClaimTypeDto.Required)
                },
                new FluentTableColumn
                {
                    Title = L["IdentityClaimType:IsStatic"],
                    Sortable = true,
                    IsCheckIcon = true,
                    Data = nameof(IdentityClaimTypeDto.IsStatic),
                    PropertyName = nameof(IdentityClaimTypeDto.IsStatic)
                }
            ]);

        // ClaimTypeManagementTableColumns.AddRange(GetExtensionTableColumns(
        //     SharpAbpIdentityModuleExtensionConsts.ModuleName,
        //     SharpAbpIdentityModuleExtensionConsts.EntityNames.ClaimType));

        ClaimTypeManagementTableColumns.Add(new FluentTableColumn
        {
            Title = L["Actions"],
            Actions = EntityActions.Get<ClaimTypeManagement>()
        });

        return base.SetTableColumnsAsync();
    }

    protected override Task ShowCreateDialogAsync()
        => ShowDialogAsync(@<ClaimTypeCreateDialog Content="@NewEntity" SubmitClick="CreateEntityAsync"/>);

    protected override Task ShowEditDialogAsync()
        => ShowDialogAsync(@<ClaimTypeEditDialog EditName="@EditName" Content="@EditingEntity"
                                                 SubmitClick="UpdateEntityAsync"/>);

    protected override UpdateIdentityClaimTypeDto MapToEditingEntity(IdentityClaimTypeDto entityDto)
    {
        EditName = entityDto.Name;
        return base.MapToEditingEntity(entityDto);
    }

    protected override async Task<IPagedResult<IdentityClaimTypeDto>> AppServiceGetListAsync(IdentityClaimTypePagedRequestDto input)
    {
        var res = await AppService.GetPagedListAsync(input);
        return res;
    }

    protected override Task<IdentityClaimTypeDto> AppServiceGetAsync(Guid id)
        => AppService.GetAsync(id);

    protected override Task AppServiceCreateAsync(CreateIdentityClaimTypeDto input)
        => AppService.CreateAsync(input);

    protected override Task AppServiceUpdateAsync(Guid id, UpdateIdentityClaimTypeDto input)
        => AppService.UpdateAsync(id, input);

    protected override Task AppServiceDeleteAsync(Guid id)
        => AppService.DeleteAsync(id);

}
