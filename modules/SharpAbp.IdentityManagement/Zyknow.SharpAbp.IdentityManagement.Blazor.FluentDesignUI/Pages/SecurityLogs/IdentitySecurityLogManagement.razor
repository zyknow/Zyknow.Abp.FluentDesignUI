@page "/identity/security-logs"
@attribute [Authorize(global::SharpAbp.Abp.Identity.IdentityPermissions.IdentitySecurityLogs.Default)]
@using global::SharpAbp.Abp.Identity
@using Volo.Abp.Application.Dtos
@inherits Volo.Abp.AspNetCore.Components.AbpComponentBase

<FluentAdaptiveCard>
    <AbpPageHeader Title="@L["IdentitySecurityLog"]" BreadcrumbItems="@BreadcrumbItems"/>
    <AbpSearch PrimaryInputVisible="@false"
               Loading="@Loading"
               ChildrenFilterToggleBtnVisible="true"
               ChildrenFilterVisible="true"
               OnSearch="SearchEntitiesAsync"
               ClearBtnVisible="true"
               ClearClick="@(() => GetListInput = new IdentitySecurityLogPagedRequestDto())">
        <FluentStack Wrap="true">
            <div>
                <FluentTextField Label="@L["IdentitySecurityLog:ApplicationName"]"
                                 @bind-Value="GetListInput.ApplicationName"></FluentTextField>
            </div>
            <div>
                <FluentDateTimePicker Label="@L["IdentitySecurityLog:StartTime"]"
                                      @bind-Value="@GetListInput.StartTime"/>
            </div>
            <div>
                <FluentDateTimePicker Label="@L["IdentitySecurityLog:EndTime"]" @bind-Value="@GetListInput.EndTime"/>
            </div>
            <div>
                <FluentTextField Label="@L["IdentitySecurityLog:UserName"]"
                                 @bind-Value="GetListInput.UserName"></FluentTextField>
            </div>
            <div>
                <FluentTextField Label="@L["IdentitySecurityLog:ClientIpAddress"]"
                                 @bind-Value="GetListInput.Action"></FluentTextField>
            </div>
            <div>
                <FluentTextField Label="@L["IdentitySecurityLog:ClientId"]"
                                 @bind-Value="GetListInput.ClientId"></FluentTextField>
            </div>
            <div>
                <FluentTextField Label="@L["IdentitySecurityLog:CorrelationId"]"
                                 @bind-Value="GetListInput.CorrelationId"></FluentTextField>
            </div>

            <div>
                <FluentTextField Label="@L["IdentitySecurityLog:Action"]"
                                 @bind-Value="GetListInput.Action"></FluentTextField>
            </div>

        </FluentStack>
    </AbpSearch>
    <AbpExtensibleDataGrid
        @ref="AbpDataGridRef"
        Loading="@Loading"
        Entities="Entities"
        TKey="Guid"
        TItem="IdentitySecurityLogDto"
        OnChange="@OnDataGridReadAsync"
        Pagination="@Pagination"
        Columns="@SecurityLogTableColumns">
    </AbpExtensibleDataGrid>
</FluentAdaptiveCard>

@code
{

    [Inject] protected IIdentitySecurityLogAppService AppService { get; set; }

    protected List<AbpBreadcrumbItem> BreadcrumbItems = new();
    protected FluentTableColumnDictionary TableColumns { get; set; } = new();

    protected List<FluentTableColumn> SecurityLogTableColumns => TableColumns.Get<IdentityRoleManagement>();
    protected bool Loading { get; set; }
    protected IdentitySecurityLogPagedRequestDto GetListInput = new();
    protected IReadOnlyList<IdentitySecurityLogDto> Entities { get; set; } = [];
    protected AbpFluentPaginationState Pagination { get; set; } = new();

    protected AbpExtensibleDataGrid<IdentitySecurityLogDto, Guid> AbpDataGridRef { get; set; } = default!;

    public IdentitySecurityLogManagement()
    {
        LocalizationResource = typeof(IdentityResource);
    }

    protected override async Task OnInitializedAsync()
    {
        await SetBreadcrumbItemsAsync();
        await SetTableColumnsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // AbpDataGridRef.FluentDataGridRef.MultiLine = true;
            InvokeAsync(StateHasChanged);
        }
    }

    protected ValueTask SetBreadcrumbItemsAsync()
    {
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["Menu:IdentityManagement"]));
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["Roles"]));
        return ValueTask.CompletedTask;
    }

    protected ValueTask SetTableColumnsAsync()
    {
        SecurityLogTableColumns
            .AddRange([
                new FluentTableColumn
                {
                    Title = L["IdentitySecurityLog:ApplicationName"],
                    Sortable = true,
                    Data = nameof(IdentitySecurityLogDto.ApplicationName),
                    PropertyName = nameof(IdentitySecurityLogDto.ApplicationName)
                },
                new FluentTableColumn
                {
                    Title = L["IdentitySecurityLog:UserName"],
                    Sortable = true,
                    Data = nameof(IdentitySecurityLogDto.UserName),
                    PropertyName = nameof(IdentitySecurityLogDto.UserName)
                },
                new FluentTableColumn
                {
                    Title = L["IdentitySecurityLog:Action"],
                    Sortable = true,
                    Data = nameof(IdentitySecurityLogDto.Action),
                    PropertyName = nameof(IdentitySecurityLogDto.Action)
                },
                new FluentTableColumn
                {
                    Title = L["IdentitySecurityLog:ClientId"],
                    Sortable = true,
                    Data = nameof(IdentitySecurityLogDto.ClientId),
                    PropertyName = nameof(IdentitySecurityLogDto.ClientId)
                },
                new FluentTableColumn
                {
                    Title = L["IdentitySecurityLog:CorrelationId"],
                    Sortable = true,
                    Data = nameof(IdentitySecurityLogDto.CorrelationId),
                    PropertyName = nameof(IdentitySecurityLogDto.CorrelationId)
                },
                new FluentTableColumn
                {
                    Title = L["IdentitySecurityLog:ClientIpAddress"],
                    Sortable = true,
                    Data = nameof(IdentitySecurityLogDto.ClientIpAddress),
                    PropertyName = nameof(IdentitySecurityLogDto.ClientIpAddress)
                },
                new FluentTableColumn
                {
                    Title = L["IdentitySecurityLog:BrowserInfo"],
                    Sortable = true,
                    Data = nameof(IdentitySecurityLogDto.BrowserInfo),
                    PropertyName = nameof(IdentitySecurityLogDto.BrowserInfo)
                },
                new FluentTableColumn
                {
                    Title = L["IdentitySecurityLog:CreationTime"],
                    Sortable = true,
                    Data = nameof(IdentitySecurityLogDto.CreationTime),
                    PropertyName = nameof(IdentitySecurityLogDto.CreationTime)
                },
            ]);

        return ValueTask.CompletedTask;
    }

    protected virtual async Task<IPagedResult<IdentitySecurityLogDto>> GetEntitiesAsync()
    {
        try
        {
            Loading = true;
            await InvokeAsync(StateHasChanged);
            Pagination.SetPageRequest(GetListInput);
            var result = await AppService.GetPagedListAsync(GetListInput);
            Entities = result.Items;
            await Pagination.SetTotalItemCountAsync((int)result.TotalCount);

            return result;
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
            return null;
        }
        finally
        {
            Loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    protected virtual async Task<IPagedResult<IdentitySecurityLogDto>> OnDataGridReadAsync(
        GridItemsProviderRequest<IdentitySecurityLogDto> e)
    {
        Pagination.Sorting = e.GetSortByProperties()
            .Select(c => c.PropertyName + (c.Direction == SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");

        var res = await GetEntitiesAsync();
        return res;
    }

    protected virtual async Task SearchEntitiesAsync()
    {
        await Pagination.SetCurrentPageIndexAsync(0);

        await GetEntitiesAsync();

        await InvokeAsync(StateHasChanged);
    }

}
