@using global::SharpAbp.Abp.Identity
@using Localization.Resources.AbpUi
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Volo.Abp.Application.Dtos
@using IdentityPermissions = global::SharpAbp.Abp.Identity.IdentityPermissions
@inherits Zyknow.Abp.FluentDesignUI.AbpCustomCrudMethodPageBase<Volo.Abp.Identity.IIdentityRoleAppService, IdentityRoleDto, Guid, OrganizationUnitUnaddedRolePagedRequestDto, IdentityRoleCreateDto, IdentityRoleUpdateDto>

<FluentDialogHeader ShowDismiss="true" ShowDismissTooltip="false">
    <FluentLabel Typo="Typography.H4">@L["AddRole"] - @OrganizationUnit.DisplayName</FluentLabel>
</FluentDialogHeader>

<FluentDialogBody>
    <AbpAdaptiveDataGridLayout>
        <AbpSearch Loading="@Loading" @bind-PrimarySearchValue="GetListInput.Filter"
                   OnSearch="SearchEntitiesAsync"></AbpSearch>
        <AbpExtensibleDataGrid Loading="@Loading"
                               TItem="IdentityRoleDto"
                               TKey="Guid"
                               EnableSelected="true"
                               @bind-SelectEntities="SelectedEntities"
                               Entities="Entities"
                               OnChange="@OnDataGridReadAsync"
                               Pagination="@Pagination"
                               ActionType="ActionType.Button"
                               Columns="@RoleManagementTableColumns">
        </AbpExtensibleDataGrid>
    </AbpAdaptiveDataGridLayout>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack HorizontalAlignment="HorizontalAlignment.End" VerticalAlignment="VerticalAlignment.Bottom">
        <FluentButton Loading="@Loading" Appearance="Appearance.Accent"
                      OnClick="@OnSubmitBtnClickAsync">@UL["Submit"]</FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code {
    [Parameter] public EventCallback<bool> OpenChanged { get; set; }
    [Parameter] public OrganizationUnitDto? OrganizationUnit { get; set; }
    [Parameter] public Func<List<Guid>, Task<DialogResult>> SubmitClick { get; set; }
    [Parameter] public List<IdentityRoleDto> SelectedEntities { get; set; } = [];

    protected List<FluentTableColumn> RoleManagementTableColumns => TableColumns.Get<OrganizationUnitAddRoleDialog>();

    [Inject] protected IOrganizationUnitAppService OrganizationUnitAppService { get; set; }
    [Inject] protected IStringLocalizer<AbpUiResource> UL { get; set; }
    [CascadingParameter] protected FluentDialog DialogRef { get; set; }

    public OrganizationUnitAddRoleDialog()
    {
        LocalizationResource = typeof(IdentityResource);
        CreatePolicyName = IdentityPermissions.OrganizationUnits.Create;
        UpdatePolicyName = IdentityPermissions.OrganizationUnits.Update;
        DeletePolicyName = IdentityPermissions.OrganizationUnits.Delete;
    }

    protected override ValueTask SetTableColumnsAsync()
    {
        RoleManagementTableColumns
            .AddRange([
                new FluentTableColumn
                {
                    Title = L["DisplayName:Name"],
                    Sortable = true,
                    Data = nameof(IdentityRoleDto.Name),
                    PropertyName = nameof(IdentityRoleDto.Name)
                },
                new FluentTableColumn
                {
                    Title = L["DisplayName:IsDefault"],
                    Sortable = true,
                    Data = nameof(IdentityRoleDto.IsDefault),
                    PropertyName = nameof(IdentityRoleDto.IsDefault),
                    IsCheckIcon = true,
                    Visible = true
                },
                new FluentTableColumn
                {
                    Title = L["DisplayName:IsPublic"],
                    Sortable = true,
                    Data = nameof(IdentityRoleDto.IsPublic),
                    PropertyName = nameof(IdentityRoleDto.IsPublic),
                    IsCheckIcon = true,
                    Visible = true
                }
            ]);

        RoleManagementTableColumns.AddRange(GetExtensionTableColumns(IdentityModuleExtensionConsts.ModuleName,
            IdentityModuleExtensionConsts.EntityNames.Role));

        return base.SetTableColumnsAsync();
    }

    protected override async Task<IPagedResult<IdentityRoleDto>> AppServiceGetListAsync(OrganizationUnitUnaddedRolePagedRequestDto input)
    {
        var res = await OrganizationUnitAppService.GetUnaddedRolesPagedListAsync(OrganizationUnit.Id, input);
        return res;
    }

    protected virtual async Task OnSubmitBtnClickAsync()
    {
        if (!SelectedEntities.Any())
            return;

        if (SubmitClick != null)
        {
            var res = await SubmitClick.Invoke(SelectedEntities.Select(x => x.Id).ToList());
            if (res != null)
            {
                DialogRef.CloseAsync(res);
            }
        }
    }

    protected override Task<IdentityRoleDto> AppServiceGetAsync(Guid id)
    {
        throw new NotImplementedException();
    }

    protected override Task AppServiceCreateAsync(IdentityRoleCreateDto input)
    {
        throw new NotImplementedException();
    }

    protected override Task AppServiceUpdateAsync(Guid id, IdentityRoleUpdateDto input)
    {
        throw new NotImplementedException();
    }

    protected override async Task AppServiceDeleteAsync(Guid id)
    {
    }

    protected override async Task ShowCreateDialogAsync()
    {
    }

    protected override async Task ShowEditDialogAsync()
    {
    }
} 