@page "/identity/organization-units"
@using global::SharpAbp.Abp.Identity
@using IdentityPermissions = global::SharpAbp.Abp.Identity.IdentityPermissions
@attribute [Authorize(IdentityPermissions.OrganizationUnits.Default)]
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Volo.Abp.Application.Dtos
@inherits AbpCustomCrudMethodPageBase<IOrganizationUnitAppService, OrganizationUnitDto, Guid, OrganizationUnitPagedRequestDto, CreateOrganizationUnitDto, UpdateOrganizationUnitDto>
<AbpAdaptiveDataGridLayout>
    <AbpPageHeader Title="@L["OrganizationUnits"]" BreadcrumbItems="@BreadcrumbItems" Toolbar="@Toolbar"/>

    <FluentStack VerticalAlignment="VerticalAlignment.Stretch" HorizontalAlignment="HorizontalAlignment.Stretch">
        <div class="fluent-card" style="width: 100%">
            <FluentStack Orientation="Orientation.Vertical">
                <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween"
                             VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel Weight="FontWeight.Bold"
                                 Typo="Typography.Subject">@L["OrganizationUnits"]</FluentLabel>
                    @if (HasCreatePermission)
                    {
                        <FluentButton Appearance="Appearance.Accent"
                                      IconStart="@(new Size20.Add())"
                                      OnClick="@ShowCreateDialogAsync">@L["CreateOrganizationUnit"]</FluentButton>
                    }
                </FluentStack>

            </FluentStack>

            <FluentTreeView Items="@TreeViewItems">
            </FluentTreeView>

        </div>
        <div class="fluent-card">
            <FluentStack>
   
            </FluentStack>
        </div>
    </FluentStack>

</AbpAdaptiveDataGridLayout>

@code {
    protected PageToolbar Toolbar { get; } = new();

    protected OrganizationUnitDto SelectedOrganizationUnit { get; set; }
    protected List<OrganizationUnitDto> ParentOrganizationUnits { get; set; } = new();
    
    protected IEnumerable<ITreeViewItem> TreeViewItems { get; set; } = new List<ITreeViewItem>();

    protected CreateOrganizationUnitDto NewOrganizationUnit { get; set; } = new();
    protected UpdateOrganizationUnitDto EditOrganizationUnit { get; set; } = new();


    
    public OrganizationUnitManagement()
    {
        LocalizationResource = typeof(IdentityResource);
        CreatePolicyName = IdentityPermissions.OrganizationUnits.Create;
        UpdatePolicyName = IdentityPermissions.OrganizationUnits.Update;
        DeletePolicyName = IdentityPermissions.OrganizationUnits.Delete;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadOrganizationUnitsAsync();
    }

    protected override ValueTask SetBreadcrumbItemsAsync()
    {
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["Menu:IdentityManagement"]));
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["OrganizationUnits"]));

        return base.SetBreadcrumbItemsAsync();
    }


    protected async Task LoadOrganizationUnitsAsync()
    {
        var root = await AppService.GetChildrenAsync(null);
        TreeViewItems = root.Select(x => new TreeViewItem
        {
            Id = x.Id.ToString(),
            Text = x.DisplayName,
            Items = new List<ITreeViewItem>(),
            OnExpandedAsync = async (item) =>
            {
                if (!item.CurrentItem.Items.Any())
                {
                    await GetChildEntitiesAsync(item.CurrentItem);
                }
            }
        }).ToList();

        ParentOrganizationUnits = await AppService.GetAllAsync();
    }

    protected virtual async Task GetChildEntitiesAsync(ITreeViewItem parentTreeView)
    {
        var children = await AppService.GetChildrenAsync(Guid.Parse(parentTreeView.Id));
        parentTreeView.Items = children.Select(x => new TreeViewItem
        {
            Id = x.Id.ToString(),
            Text = x.DisplayName,
            Items = new List<ITreeViewItem>(),
            OnExpandedAsync = async (item) =>
            {
                if (!item.CurrentItem.Items.Any())
                {
                    await GetChildEntitiesAsync(item.CurrentItem);
                }
            }
        }).ToList();
    }


    protected override async Task<IPagedResult<OrganizationUnitDto>> AppServiceGetListAsync(OrganizationUnitPagedRequestDto input)
    {
        var result = await AppService.GetPagedListAsync(input);
        return result;
    }

    protected override Task<OrganizationUnitDto> AppServiceGetAsync(Guid id)
        => AppService.GetAsync(id);

    protected override Task AppServiceCreateAsync(CreateOrganizationUnitDto input)
        => AppService.CreateAsync(input);

    protected override Task AppServiceUpdateAsync(Guid id, UpdateOrganizationUnitDto input)
        => AppService.UpdateAsync(id, input);

    protected override Task AppServiceDeleteAsync(Guid id)
        => AppService.DeleteAsync(id);

    protected override async Task ShowCreateDialogAsync()
    {
    }

    protected override async Task ShowEditDialogAsync()
    {
    }

}