@page "/identity/organization-units"
@using global::SharpAbp.Abp.Identity
@using IdentityPermissions = global::SharpAbp.Abp.Identity.IdentityPermissions
@attribute [Authorize(IdentityPermissions.OrganizationUnits.Default)]
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Volo.Abp.Application.Dtos
@inherits AbpCustomCrudMethodPageBase<IOrganizationUnitAppService, OrganizationUnitDto, Guid, OrganizationUnitPagedRequestDto, CreateOrganizationUnitDto, UpdateOrganizationUnitDto>

<AbpAdaptiveDataGridLayout>
    <AbpPageHeader Title="@L["OrganizationUnits"]" BreadcrumbItems="@BreadcrumbItems" Toolbar="@Toolbar"/>
    <FluentGrid>
        <FluentGridItem xs="5" Class="fluent-card">
            <FluentStack VerticalGap="20" Orientation="Orientation.Vertical"
                         HorizontalAlignment="HorizontalAlignment.Stretch">
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween"
                                 VerticalAlignment="VerticalAlignment.Center">
                        <FluentLabel Weight="FontWeight.Bold"
                                     Typo="Typography.Subject">@L["OrganizationUnits"]</FluentLabel>
                        @if (HasCreatePermission)
                        {
                            <FluentButton Appearance="Appearance.Accent"
                                          IconStart="@(new Size20.Add())"
                                          OnClick="@OpenCreateDialogAsync">@L["CreateOrganizationUnit"]</FluentButton>
                        }
                    </FluentStack>

                </FluentStack>

                <FluentTreeView SelectedItem="@TreeViewSelectedItem"
                                SelectedItemChanged="@(async (v) =>
                                                     {
                                                         TreeViewSelectedItem = v;
                                                         await HandleTreeViewOnSelectedChangeAsync();
                                                     })"
                                Items="@TreeViewItems"
                                LazyLoadItems="true">
                    <ItemTemplate>
                        <div @onclick="@(() => TreeViewSelectedItem = context)" style="width: 100%">
                            <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween"
                                         VerticalAlignment="VerticalAlignment.Center">
                                <FluentLabel>@context.Text</FluentLabel>
                                <EntityActions OnlyIcon="true" @ref="EntityActionsRef"
                                               TItem="TreeViewItem<OrganizationUnitDto>"
                                               ToggleAppearance="Appearance.Stealth">
                                    @foreach (var action in EntityActions.Get<OrganizationUnitManagement>())
                                    {
                                        <EntityAction ParentActions="@EntityActionsRef"
                                                      TItem="TreeViewItem<OrganizationUnitDto>"
                                                      Color="@action.Color?.ToString()"
                                                      Clicked="@(async () => await action.Clicked(context))"
                                                      Appearance="@(action.Appearance ?? Appearance.Accent)"
                                                      Icon="@action.Icon"
                                                      ConfirmationMessage="action.ConfirmationMessage != null ? () => action.ConfirmationMessage.Invoke((context as TreeViewItem<OrganizationUnitDto>).Data) : null"
                                                      Visible="@(action.Visible?.Invoke(context) ?? true)"
                                                      Text="@action.Text"
                                                      Disabled="@action.Disabled">
                                        </EntityAction>
                                    }
                                </EntityActions>
                            </FluentStack>
                        </div>
                    </ItemTemplate>
                </FluentTreeView>
            </FluentStack>

        </FluentGridItem>
        <FluentGridItem xs="7" Class="fluent-card">
            @if (SelectedOrganizationUnit != null)
            {
                <FluentTabs OnTabChange="HandleOnTabChange" @bind-ActiveTabId="@SelectedTabId">
                    <OrganizationUnitMemberTabContent
                        OrganizationUnit="@SelectedOrganizationUnit"
                        @ref="OrganizationUnitMemberTabContentRef"></OrganizationUnitMemberTabContent>
                    <OrganizationUnitRoleTabContent
                        OrganizationUnit="@SelectedOrganizationUnit"
                        @ref="OrganizationUnitRoleTabContentRef"></OrganizationUnitRoleTabContent>
                </FluentTabs>
            }
        </FluentGridItem>
    </FluentGrid>
</AbpAdaptiveDataGridLayout>

@code {
    protected PageToolbar Toolbar { get; } = new();
    protected IEnumerable<TreeViewItem<OrganizationUnitDto>> TreeViewItems { get; set; } = new List<TreeViewItem<OrganizationUnitDto>>();
    protected string EditName { get; set; }

    protected ITreeViewItem? TreeViewSelectedItem;

    protected OrganizationUnitDto? SelectedOrganizationUnit =>
        TreeViewSelectedItem?.As<TreeViewItem<OrganizationUnitDto>>()?.Data;

    protected OrganizationUnitMemberTabContent OrganizationUnitMemberTabContentRef { get; set; }
    protected OrganizationUnitRoleTabContent OrganizationUnitRoleTabContentRef { get; set; }

    protected EntityActions<TreeViewItem<OrganizationUnitDto>> EntityActionsRef { get; set; }

    protected TreeViewItem<OrganizationUnitDto>? RefreshActionTreeView;

    protected string SelectedTabId { get; set; } = "Members";

    public OrganizationUnitManagement()
    {
        LocalizationResource = typeof(IdentityResource);
        CreatePolicyName = IdentityPermissions.OrganizationUnits.Create;
        UpdatePolicyName = IdentityPermissions.OrganizationUnits.Update;
        DeletePolicyName = IdentityPermissions.OrganizationUnits.Delete;
    }

    protected override ValueTask SetEntityActionsAsync()
    {
        EntityActions
            .Get<OrganizationUnitManagement>()
            .AddRange([
                new()
                {
                    Text = L["CreateChildrenOrganizationUnit"],
                    Visible = (data) => HasCreatePermission,
                    Clicked = async (data) =>
                    {
                        var item = data.As<TreeViewItem<OrganizationUnitDto>>();
                        await OpenCreateDialogAsync(item.Data);
                        RefreshActionTreeView = item;
                        // item.Parent.Items = await GetChildEntitiesAsync(item?.Parent);
                    }
                },
                new()
                {
                    Text = L["Edit"],
                    Visible = (data) => HasUpdatePermission,
                    Clicked = async (data) =>
                    {
                        var item = data.As<TreeViewItem<OrganizationUnitDto>>();
                        RefreshActionTreeView = item?.Parent;
                        await OpenEditDialogAsync(item.Data);
                        // item.Items = await GetChildEntitiesAsync(item);
                    }
                },
                new()
                {
                    Text = L["Delete"],
                    Color = "red",
                    Visible = (data) => HasDeletePermission,
                    Clicked = async (data) =>
                    {
                        var item = data.As<TreeViewItem<OrganizationUnitDto>>();
                        RefreshActionTreeView = item?.Parent;
                        await DeleteEntityAsync(item.Data);
                        // item.Items = await GetChildEntitiesAsync(item);
                    },
                    ConfirmationMessage = (data) => GetDeleteConfirmationMessage(data.As<OrganizationUnitDto>())
                }
            ]);

        return base.SetEntityActionsAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        TreeViewItems = await GetChildEntitiesAsync();
    }

    protected override ValueTask SetBreadcrumbItemsAsync()
    {
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["Menu:IdentityManagement"]));
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["OrganizationUnits"]));

        return base.SetBreadcrumbItemsAsync();
    }

    protected virtual async Task<List<TreeViewItem<OrganizationUnitDto>>> GetChildEntitiesAsync(TreeViewItem<OrganizationUnitDto>? parentTreeView = null)
    {
        var children = await AppService.GetChildrenAsync(parentTreeView?.Data?.Id);
        return children.Select(x => new TreeViewItem<OrganizationUnitDto>
        {
            Id = x.Id.ToString(),
            Text = x.DisplayName,
            Data = x,
            Parent = parentTreeView,
            Items = TreeViewItem.LoadingTreeViewItems,
            OnExpandedAsync = async (e) =>
            {
                if (e.Expanded)
                {
                    e.CurrentItem.Items = await GetChildEntitiesAsync(e.CurrentItem as TreeViewItem<OrganizationUnitDto>);
                }
                else
                {
                    e.CurrentItem.Items = TreeViewItem.LoadingTreeViewItems;
                }
            }
        }).ToList();
    }

    protected override async Task<IPagedResult<OrganizationUnitDto>> AppServiceGetListAsync(OrganizationUnitPagedRequestDto input)
    {
        var result = await AppService.GetPagedListAsync(input);
        return result;
    }

    protected override Task<OrganizationUnitDto> AppServiceGetAsync(Guid id)
        => AppService.GetAsync(id);

    protected override Task AppServiceCreateAsync(CreateOrganizationUnitDto input)
        => AppService.CreateAsync(input);

    protected override Task AppServiceUpdateAsync(Guid id, UpdateOrganizationUnitDto input)
        => AppService.UpdateAsync(id, input);

    protected override Task AppServiceDeleteAsync(Guid id)
        => AppService.DeleteAsync(id);

    protected override async Task ShowCreateDialogAsync()
    {
        await ShowCreateDialogAsync(null);
    }

    protected async Task ShowCreateDialogAsync(OrganizationUnitDto? parent)
    {
        await ShowDialogAsync(@<OrganizationUnitCreateDialog
                Parent="@parent"
                Content="@NewEntity" SubmitClick="CreateEntityAsync"/>);
    }

    protected override async Task<IPagedResult<OrganizationUnitDto>> GetEntitiesAsync()
    {
        if (RefreshActionTreeView == null)
        {
            TreeViewItems = await GetChildEntitiesAsync();
        }
        else
        {
            RefreshActionTreeView.Items = await GetChildEntitiesAsync(RefreshActionTreeView);
        }

        await InvokeAsync(StateHasChanged);
        return null;
    }

    protected virtual async Task OpenCreateDialogAsync(OrganizationUnitDto parent)
    {
        try
        {
            await CheckCreatePolicyAsync();

            NewEntity = new CreateOrganizationUnitDto();
            NewEntity.ParentId = parent.Id;
            await ShowCreateDialogAsync(parent);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }


    protected override Task ShowEditDialogAsync()
        => ShowDialogAsync(@<OrganizationUnitEditDialog EditName="@EditName"
                                                        Content="@EditingEntity" SubmitClick="UpdateEntityAsync"/>);

    protected override UpdateOrganizationUnitDto MapToEditingEntity(OrganizationUnitDto entityDto)
    {
        EditName = entityDto.DisplayName;
        return base.MapToEditingEntity(entityDto);
    }

    protected override string GetDeleteConfirmationMessage(OrganizationUnitDto entity)
    {
        return string.Format(L["OrganizationUnitDeletionConfirmationMessage"], entity.DisplayName);
    }

    private async Task HandleTreeViewOnSelectedChangeAsync()
    {
        if (SelectedOrganizationUnit == null)
            return;

        
        await OrganizationUnitRoleTabContentRef.RefreshAsync();
        await OrganizationUnitMemberTabContentRef.RefreshAsync();
    }

    protected virtual async Task HandleOnTabChange(FluentTab arg)
    {
        SelectedTabId = arg.Id;
    }


}