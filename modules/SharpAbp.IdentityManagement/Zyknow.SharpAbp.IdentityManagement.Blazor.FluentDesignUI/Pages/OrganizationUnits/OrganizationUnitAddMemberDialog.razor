@implements IDialogContentComponent
@using global::SharpAbp.Abp.Identity
@using Localization.Resources.AbpUi
@using Volo.Abp.Application.Dtos
@using Volo.Abp.Identity.Settings
@using OrganizationUnitMemberPagedRequestDto = global::SharpAbp.Abp.Identity.OrganizationUnitMemberPagedRequestDto
@inherits Zyknow.Abp.FluentDesignUI.AbpCustomCrudMethodPageBase<Volo.Abp.Identity.IIdentityUserAppService, IdentityUserDto, Guid, OrganizationUnitUnaddedMemberPagedRequestDto, IdentityUserCreateDto, IdentityUserUpdateDto>

<FluentDialogHeader ShowDismiss="true" ShowDismissTooltip="false">
    <FluentLabel Typo="Typography.H4">@L["AddMember"] - @OrganizationUnit.DisplayName</FluentLabel>
</FluentDialogHeader>

<FluentDialogBody>
    <AbpAdaptiveDataGridLayout>
        <AbpSearch Loading="@Loading" @bind-PrimarySearchValue="GetListInput.Filter"
                   OnSearch="SearchEntitiesAsync"></AbpSearch>
        <AbpExtensibleDataGrid Loading="@Loading"
                               TItem="IdentityUserDto"
                               TKey="Guid"
                               EnableSelected="true"
                               @bind-SelectEntities="SelectedEntities"
                               Entities="Entities"
                               OnChange="@OnDataGridReadAsync"
                               Pagination="@Pagination"
                               ActionType="ActionType.Button"
                               Columns="@UserManagementTableColumns">
        </AbpExtensibleDataGrid>
    </AbpAdaptiveDataGridLayout>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack HorizontalAlignment="HorizontalAlignment.End" VerticalAlignment="VerticalAlignment.Bottom">
        <FluentButton Loading="@Loading" Appearance="Appearance.Accent"
                      OnClick="@OnSubmitBtnClickAsync">@UL["Submit"]</FluentButton>
    </FluentStack>
</FluentDialogFooter>



@code {
    [Parameter] public OrganizationUnitDto OrganizationUnit { get; set; }

    [Parameter] public Func<List<Guid>, Task<DialogResult>> SubmitClick { get; set; }

    [Parameter] public List<IdentityUserDto> SelectedEntities { get; set; } = [];

    protected List<FluentTableColumn> UserManagementTableColumns => TableColumns.Get<OrganizationUnitAddMemberDialog>();

    [Inject] protected IOrganizationUnitAppService OrganizationUnitAppService { get; set; }
    [Inject] protected IStringLocalizer<AbpUiResource> UL { get; set; }

    [CascadingParameter] protected FluentDialog DialogRef { get; set; }

    public OrganizationUnitAddMemberDialog()
    {
        LocalizationResource = typeof(IdentityResource);
    }

    protected override async Task<IPagedResult<IdentityUserDto>> AppServiceGetListAsync(OrganizationUnitUnaddedMemberPagedRequestDto input)
    {
        var res = await OrganizationUnitAppService.GetUnaddedMembersPagedListAsync(OrganizationUnit.Id, input);
        return res;
    }

    protected override ValueTask SetTableColumnsAsync()
    {
        UserManagementTableColumns
            .AddRange([
                new FluentTableColumn
                {
                    Title = L["DisplayName:UserName"],
                    Sortable = true,
                    Data = nameof(IdentityUserDto.Name),
                    PropertyName = nameof(IdentityUserDto.Name)
                },
                new FluentTableColumn
                {
                    Title = L["DisplayName:Email"],
                    Sortable = true,
                    Data = nameof(IdentityUserDto.Email),
                    PropertyName = nameof(IdentityUserDto.Email),
                    Visible = true
                },
                new FluentTableColumn
                {
                    Title = L["DisplayName:PhoneNumber"],
                    Sortable = true,
                    Data = nameof(IdentityUserDto.PhoneNumber),
                    PropertyName = nameof(IdentityUserDto.PhoneNumber),
                    Visible = false
                },
                new FluentTableColumn
                {
                    Title = L["DisplayName:IsActive"],
                    Sortable = true,
                    Data = nameof(IdentityUserDto.IsActive),
                    PropertyName = nameof(IdentityUserDto.IsActive),
                    IsCheckIcon = true,
                    Visible = false
                },
                new FluentTableColumn
                {
                    Title = L["DisplayName:LockoutEnabled"],
                    Sortable = true,
                    Data = nameof(IdentityUserDto.LockoutEnabled),
                    PropertyName = nameof(IdentityUserDto.LockoutEnabled),
                    IsCheckIcon = true,
                    Visible = false
                }
            ]);

        UserManagementTableColumns.AddRange(GetExtensionTableColumns(IdentityModuleExtensionConsts.ModuleName,
            IdentityModuleExtensionConsts.EntityNames.User));

        return base.SetTableColumnsAsync();
    }

    private async Task OnSubmitBtnClickAsync()
    {
        if (!SelectedEntities.Any())
            return;

        if (SubmitClick != null)
        {
            var res = await SubmitClick.Invoke(SelectedEntities.Select(x => x.Id).ToList());
            if (res != null)
            {
                DialogRef.CloseAsync(res);
            }
        }
    }


    protected override Task<IdentityUserDto> AppServiceGetAsync(Guid id)
    {
        throw new NotImplementedException();
    }

    protected override Task AppServiceCreateAsync(IdentityUserCreateDto input)
    {
        throw new NotImplementedException();
    }

    protected override Task AppServiceUpdateAsync(Guid id, IdentityUserUpdateDto input)
    {
        throw new NotImplementedException();
    }

    protected override Task AppServiceDeleteAsync(Guid id)
    {
        throw new NotImplementedException();
    }

    protected override Task ShowCreateDialogAsync()
    {
        throw new NotImplementedException();
    }

    protected override Task ShowEditDialogAsync()
    {
        throw new NotImplementedException();
    }

}