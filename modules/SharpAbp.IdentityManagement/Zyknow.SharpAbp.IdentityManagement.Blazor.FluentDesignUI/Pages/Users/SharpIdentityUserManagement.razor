@inherits Zyknow.Abp.IdentityManagement.Blazor.FluentDesignUI.Pages.Users.IdentityUserManagement
@attribute [ExposeServices(typeof(IdentityUserManagement))]
@attribute [Dependency(ReplaceServices = true)]
@using global::SharpAbp.Abp.Identity
@using Volo.Abp.DependencyInjection
@using Zyknow.Abp.IdentityManagement.Blazor.FluentDesignUI.Pages.Users
@using IIdentityUserAppService = global::SharpAbp.Abp.Identity.IIdentityUserAppService
@using IdentityPermissions = global::SharpAbp.Abp.Identity.IdentityPermissions

<AbpAdaptiveDataGridLayout>
    <AbpPageHeader Title="@L["Users"]" BreadcrumbItems="@BreadcrumbItems" Toolbar="@Toolbar"/>

    <AbpSearch Loading="@Loading" @bind-PrimarySearchValue="GetListInput.Filter"
               OnSearch="SearchEntitiesAsync"></AbpSearch>

    <AbpExtensibleDataGrid Loading="@Loading"
                           TItem="IdentityUserDto"
                           TKey="Guid"
                           EnableSelected="true"
                           OnDeleteSelected="DeleteEntitiesAsync"
                           DeleteSelectedDisplayPropertyConfirmExpression="@(r => r.UserName)"
                           PrimarySelectedDeletesBtnVisible="@HasDeletePermission"
                           Entities="Entities"
                           OnChange="@OnDataGridReadAsync"
                           Pagination="@Pagination"
                           Columns="@UserManagementTableColumns">
    </AbpExtensibleDataGrid>
</AbpAdaptiveDataGridLayout>

@code
{

    public SharpIdentityUserManagement() : base()
    {
    }

    [Inject] protected IIdentityUserAppService SharpIdentityUserAppService { get; set; } = default!;

    protected override async ValueTask SetEntityActionsAsync()
    {
        await base.SetEntityActionsAsync();
        EntityActions
            .Get<IdentityUserManagement>()
            .InsertRange(0, [
                new()
                {
                    Text = L["Permission:SharpAbpIdentity.IdentityClaimTypes"],
                    Visible = (data) => HasUpdatePermission,
                    Clicked = async (data) =>
                    {
                        var user = data.As<IdentityUserDto>();
                        await ShowClaimDialogAsync(user);
                        await InvokeAsync(StateHasChanged);
                    }
                },
                new()
                {
                    Text = L["ChangePassword"],
                    Visible = (data) => HasUpdatePermission,
                    Clicked = async (data) =>
                    {
                        var user = data.As<IdentityUserDto>();
                        await ShowChangePasswordDialogAsync(user);
                        await InvokeAsync(StateHasChanged);
                    }
                },
                new()
                {
                    Text = L["LockUser"],
                    Visible = (data) => HasUpdatePermission,
                    Clicked = async (data) =>
                    {
                        var user = data.As<IdentityUserDto>();
                        await ShowLockDialogAsync(user);
                        await InvokeAsync(StateHasChanged);
                    }
                },
                new()
                {
                    Text = L["UnLockUser"],
                    Visible = (data) =>
                    {
                        var user = data.As<IdentityUserDto>();
                        return HasUpdatePermission && user.LockoutEnabled && user.LockoutEnd >= DateTimeOffset.Now;
                    },
                    Clicked = async (data) =>
                    {
                        var user = data.As<IdentityUserDto>();
                        await SharpIdentityUserAppService.UnLockAsync(user.Id);
                        await GetEntitiesAsync();
                    }
                },
                new()
                {
                    Text = L["TwoFactor"],
                    Visible = (data) => HasUpdatePermission,
                    Clicked = async (data) =>
                    {
                        try
                        {
                            var user = data.As<IdentityUserDto>();
                            var userTowFactorIsEnabled = await SharpIdentityUserAppService.TwoFactorEnableAsync(user.Id);
                            var dialogRef = await ShowDialogAsync(@<FluentCheckbox @bind-Value="@userTowFactorIsEnabled"
                                                                                   Label="@L["EnableTwoFactor"]"></FluentCheckbox>
                                , opt =>
                                {
                                    opt.Height = null;
                                    opt.Title = $@"{L["EnableTwoFactor"]} - {user.UserName}";
                                    opt.PrimaryAction = L["Submit"];
                                    opt.SecondaryAction = L["Cancel"];
                                });
                            var res = await dialogRef.Result;
                            if (!res.Cancelled)
                            {
                                await SharpIdentityUserAppService.SetTwoFactorAsync(user.Id, userTowFactorIsEnabled);
                            }
                        }
                        catch (Exception e)
                        {
                            await HandleErrorAsync(e);
                        }
                    }
                }
            ]);
    }

    protected virtual async Task ShowClaimDialogAsync(IdentityUserDto user)
    {
        await ShowDialogAsync(@<IdentityUserClaimTypeManagementDialog User="@user"
                                                                      SubmitClick="@((v) => UpdateClaimAsync(user, v))"/>);
    }

    protected virtual async Task<DialogResult?> UpdateClaimAsync(IdentityUserDto user, List<CreateOrUpdateIdentityUserClaimDto> claims)
    {
        try
        {
            await SharpIdentityUserAppService.UpdateClaimsAsync(user.Id, claims);
            return DialogResult.Ok<object>(null);
        }
        catch (Exception e)
        {
            await HandleErrorAsync(e);
            return null;
        }
    }

    protected virtual async Task ShowChangePasswordDialogAsync(IdentityUserDto user)
    {
        await ShowDialogAsync(@<IdentityUserChangePasswordDialog User="@user"
                                                                 Content="@(new SetPasswordDto())"
                                                                 SubmitClick="@((input) => ChangePasswordAsync(user, input))"/>, opt => opt.Height = null);
    }

    protected virtual async Task<DialogResult?> ChangePasswordAsync(IdentityUserDto user, SetPasswordDto input)
    {
        try
        {
            await SharpIdentityUserAppService.SetPasswordAsync(user.Id, input);
            return DialogResult.Ok<object>(null);
        }
        catch (Exception e)
        {
            await HandleErrorAsync(e);
            return null;
        }
    }

    protected virtual async Task ShowLockDialogAsync(IdentityUserDto user)
    {
        await ShowDialogAsync(@<IdentityUserLockDialog User="@user"
                                                       SubmitClick="@((input) => LockUserAsync(user, input))"/>, opt => opt.Height = null);
    }

    protected virtual async Task<DialogResult?> LockUserAsync(IdentityUserDto user, int seconds)
    {
        if (seconds <= 0)
            return DialogResult.Ok<object>(null);

        try
        {
            await SharpIdentityUserAppService.LockAsync(user.Id, seconds);
            await GetEntitiesAsync();
            return DialogResult.Ok<object>(null);
        }
        catch (Exception e)
        {
            await HandleErrorAsync(e);
            return null;
        }
    }
}
