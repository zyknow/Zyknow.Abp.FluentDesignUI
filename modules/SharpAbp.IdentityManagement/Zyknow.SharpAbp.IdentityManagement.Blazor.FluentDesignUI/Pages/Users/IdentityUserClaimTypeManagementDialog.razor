@using global::SharpAbp.Abp.Identity
@using Localization.Resources.AbpUi
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Volo.Abp
@using Zyknow.Abp.FluentDesignUI.Validation
@using IIdentityUserAppService = global::SharpAbp.Abp.Identity.IIdentityUserAppService
@inherits Volo.Abp.AspNetCore.Components.AbpComponentBase


<FluentDialogHeader ShowDismiss="true" ShowDismissTooltip="false">
    <FluentLabel Typo="Typography.H4">@($@"{L["CreateIdentityClaimType"]} - {User.UserName}")</FluentLabel>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentEditForm @ref="FormRef" OnValidSubmit="AddClaimAsync" Model="@NewClaim">
        <AbpDataAnnotationsValidator Localize="@LH.Localize"/>
        <FluentValidationSummary></FluentValidationSummary>
        <FluentStack Orientation="Orientation.Vertical">
            <FluentSelect
                TOption="IdentityClaimTypeDto"
                Items="@ClaimTypes"
                Style="width: 100%" Label="@L["IdentityClaimType:ValueType"]"
                OptionText="x => x.Name"
                OptionValue="x => x.Name"
                @bind-Value="@NewClaim.ClaimType"
                SelectedOptionChanged="@(v =>
                                       {
                                           NewClaim.ClaimValue = GetValueTypeByClaimType(v.Name) switch
                                           {
                                               IdentityClaimValueType.String => string.Empty,
                                               IdentityClaimValueType.Int => "0",
                                               IdentityClaimValueType.Boolean => "false",
                                               IdentityClaimValueType.DateTime => null,
                                               _ => NewClaim.ClaimValue
                                           };
                                       })"
            >
            </FluentSelect>

            @ClaimInputRender(NewClaim, true)

            <FluentButton Style="width: 100%" Appearance="Appearance.Accent"
                          Type="ButtonType.Submit">@UL["AddClaim"]</FluentButton>

            <FluentStack Class="fluent-card" Orientation="Orientation.Vertical">
                @foreach (var createOrUpdateIdentityUserClaimDto in UserClaims)
                {
                    @ClaimInputRender(createOrUpdateIdentityUserClaimDto, false)
                }
            </FluentStack>

        </FluentStack>


    </FluentEditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Loading="@Loading" Appearance="Appearance.Accent" OnClick="OnSubmitClick">@UL["Submit"]</FluentButton>
</FluentDialogFooter>

@code
{
    public CreateOrUpdateIdentityUserClaimDto NewClaim { get; set; } = new CreateOrUpdateIdentityUserClaimDto();

    public List<CreateOrUpdateIdentityUserClaimDto> UserClaims { get; set; } = [];
    public List<IdentityClaimTypeDto> ClaimTypes { get; set; } = [];

    [Parameter] public IdentityUserDto User { get; set; }
    [Parameter] public Func<List<CreateOrUpdateIdentityUserClaimDto>, Task<DialogResult?>> SubmitClick { get; set; }

    [Inject] protected AbpBlazorMessageLocalizerHelper<IdentityResource> LH { get; set; }

    [Inject] protected IStringLocalizer<AbpUiResource> UL { get; set; }

    [Inject] protected IIdentityUserAppService AppService { get; set; }

    [CascadingParameter] protected FluentDialog? Dialog { get; set; }


    protected bool Loading { get; set; }

    protected FluentEditForm FormRef { get; set; }

    public IdentityUserClaimTypeManagementDialog()
    {
        LocalizationResource = typeof(IdentityResource);
    }

    protected override async Task OnInitializedAsync()
    {
        ClaimTypes = await AppService.GetAllClaimTypesAsync();
        var userClaims = await AppService.GetClaimsAsync(User.Id);

        UserClaims = userClaims.Select(x => new CreateOrUpdateIdentityUserClaimDto
        {
            ClaimType = x.ClaimType,
            ClaimValue = x.ClaimValue,
            UserId = User.Id,
        }).ToList();
        ResetNewClaim();
    }

    protected async Task AddClaimAsync()
    {
        try
        {
            if (UserClaims.Any(x => x.ClaimType == NewClaim.ClaimType && x.ClaimValue == NewClaim.ClaimValue))
            {
                throw new UserFriendlyException(L["IdentityClaimType:ClaimAlreadyExists"]);
            }

            UserClaims.Add(NewClaim);
            ResetNewClaim();
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    protected virtual async Task OnSubmitClick()
    {
        var res = await SubmitClick.Invoke(UserClaims);
        if (res != null)
        {
            await Dialog.CloseAsync();
        }
    }


    protected virtual IdentityClaimValueType GetValueTypeByClaimType(string claimType)
    {
        var claim = ClaimTypes.FirstOrDefault(x => x.Name == claimType);
        if (claim != null)
        {
            return claim.ValueType;
        }

        return IdentityClaimValueType.String;
    }

    protected virtual void ResetNewClaim()
    {
        NewClaim = new CreateOrUpdateIdentityUserClaimDto()
        {
            ClaimType = ClaimTypes.FirstOrDefault()?.Name,
            UserId = User.Id,
        };

        NewClaim.ClaimValue = GetValueTypeByClaimType(NewClaim.ClaimType) switch
        {
            IdentityClaimValueType.String => string.Empty,
            IdentityClaimValueType.Int => "0",
            IdentityClaimValueType.Boolean => "false",
            IdentityClaimValueType.DateTime => null,
            _ => NewClaim.ClaimValue
        };
    }

    protected virtual RenderFragment ClaimInputRender(CreateOrUpdateIdentityUserClaimDto input, bool isNewClaim) => __builder =>
    {
        var type = GetValueTypeByClaimType(input.ClaimType);
        <FluentStack VerticalAlignment="VerticalAlignment.Center"
                     Orientation="@(isNewClaim ? Orientation.Vertical : Orientation.Horizontal)"
                     HorizontalAlignment="HorizontalAlignment.SpaceBetween">
            @if (type == IdentityClaimValueType.String)
            {
                <FluentTextField Style="width: 100%"
                                 Label="@(isNewClaim ? L["IdentityClaimType:ClaimValue"] : @input.ClaimType)"
                                 @bind-Value="@input.ClaimValue"
                />
            }
            else if (type == IdentityClaimValueType.Int)
            {
                <FluentNumberField Style="width: 100%" TValue="int"
                                   Value="@(input.ClaimValue?.To<int>() ?? 0)"
                                   ValueChanged="@((v) => input.ClaimValue = v.ToString())"
                                   Label="@(isNewClaim ? L["IdentityClaimType:ClaimValue"] : @input.ClaimType)"/>
            }
            else if (type == IdentityClaimValueType.Boolean)
            {
                <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween">
                    <FluentLabel>
                        @(isNewClaim ? L["IdentityClaimType:ClaimValue"] : @input.ClaimType)
                    </FluentLabel>

                    <FluentCheckbox
                        Value="@(input.ClaimValue?.To<bool>() ?? false)"
                        ValueChanged="@((v) => input.ClaimValue = v.ToString())"/>

                </FluentStack>
            }
            else if (type == IdentityClaimValueType.DateTime)
            {
                <FluentDatePicker Label="@(isNewClaim ? L["IdentityClaimType:ClaimValue"] : @input.ClaimType)"
                                  Value="@(input.ClaimValue?.To<DateTime>() ?? null)"
                                  ValueChanged="@((v) => input.ClaimValue = v?.ToString())"
                                  Style="width: 100%"/>
            }

            @if (!isNewClaim)
            {
                <FluentIcon Value="@(new Size20.Delete())" Color="Color.Error"
                            OnClick="@(() => UserClaims.Remove(input))"></FluentIcon>
            }

        </FluentStack>
    };
}
