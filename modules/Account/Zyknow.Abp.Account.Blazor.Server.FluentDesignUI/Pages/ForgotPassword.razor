@page "/Account/ForgotPassword"
@layout AccountPublicLayout
@using Microsoft.Extensions.Options
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Volo.Abp.Account.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.MultiTenancy
@using Zyknow.Abp.AspnetCore.Components.Server.FluentDesignTheme.Themes.FluentDesignTheme
@using Zyknow.Abp.Account.Blazor.Server.FluentDesignUI.Pages.Components
@using Zyknow.Abp.Account.Blazor.Server.FluentDesignUI.Themes.FluentDesignTheme
@inherits Zyknow.Abp.Account.Blazor.FluentDesignUI.AccountBlazorFluentDesignComponentBase
@inject AbpBlazorMessageLocalizerHelper<AccountResource> LH
<AbpFluentForm @ref="FormRef" Content="Input" SubmitClick="SubmitAsync" Localize="@LH.Localize">
    <Header>
        <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween"
                     VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel Typo="Typography.H2" Weight="FontWeight.Bold">@L["ForgotPassword"]</FluentLabel>
            <LanguageSwitch/>
        </FluentStack>

        @if (MultiTenancyOptions.Value.IsEnabled)
        {
            <TenantSwitch/>
        }
    </Header>
    <ChildContent>
        <FluentLabel Style="margin-bottom: 20px">
            @L["SendPasswordResetLink_Information"]
        </FluentLabel>

        <FluentTextField Style="width: 100%" TextFieldType="TextFieldType.Email"
                         @bind-Value="Input.Email"
                         Label="@L["DisplayName:Email"]"></FluentTextField>
        <FluentValidationMessage For="@(() => Input.Email)"></FluentValidationMessage>
    </ChildContent>
    <Footer>
        <FluentGrid AdaptiveRendering="true" Justify="JustifyContent.SpaceBetween" Spacing="0">
            <FluentGridItem xs="4">
                <FluentButton IconStart="@(new Size16.ArrowLeft())" Disabled="@Loading" Style="height: 35px"
                              Appearance="Appearance.Outline"
                              OnClick="@(() => NavigationManager.NavigateTo(LoginUrl))">@L["Login"]</FluentButton>
            </FluentGridItem>
            <FluentGridItem xs="8">
                <FluentButton Disabled="@Loading" Style="height: 35px;width: 100%" Appearance="Appearance.Accent"
                              OnClick="@FormRef.OnSubmitBtnClickAsync">@L["Submit"]</FluentButton>
            </FluentGridItem>
        </FluentGrid>
    </Footer>
</AbpFluentForm>


@code {
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrlHash { get; set; }

    AbpFluentForm<SendPasswordResetCodeDto> FormRef;

    [Inject] protected IOptions<AbpMultiTenancyOptions> MultiTenancyOptions { get; set; }

    protected virtual bool Loading { get; set; }

    protected virtual string LoginUrl { get; set; }

    protected override void OnInitialized()
    {
        LoginUrl = NavigationManager.GetUriWithQueryParameters("/Account/Login",
            new Dictionary<string, object>
            {
                ["returnUrl"] = ReturnUrl,
                ["returnUrlHash"] = ReturnUrlHash
            });
    }

    public SendPasswordResetCodeDto Input { get; set; } = new()
    {
        AppName = "MVC",
    };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Input.ReturnUrl = ReturnUrl;
            Input.ReturnUrlHash = ReturnUrlHash;
        }
    }

    protected virtual async Task SubmitAsync()
    {
        try
        {
            await AccountAppService.SendPasswordResetCodeAsync(Input);

            var url = NavigationManager.GetUriWithQueryParameters("/Account/PasswordResetLinkSent",
                new Dictionary<string, object>
                {
                    ["returnUrl"] = Input.ReturnUrl,
                    ["returnUrlHash"] = Input.ReturnUrlHash
                });

            NavigationManager.NavigateTo(url, forceLoad: true);
        }
        catch (Exception e)
        {
            Alerts.Danger(GetLocalizeExceptionMessage(e));
        }
    }


}