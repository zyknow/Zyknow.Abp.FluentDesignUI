@using Localization.Resources.AbpUi
@using Microsoft.Extensions.Localization
@using Volo.Abp
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.AspNetCore.Mvc.MultiTenancy
@using TInput = string
@using TResource = Volo.Abp.MultiTenancy.Localization.AbpMultiTenancyResource
@implements IDialogContentComponent
@inherits Volo.Abp.AspNetCore.Components.AbpComponentBase
@inject IStringLocalizer<TResource> TL
@inject IStringLocalizer<AbpUiResource> UL
<FluentDialogHeader ShowDismiss="true" ShowDismissTooltip="false">
    <FluentLabel Typo="Typography.H4">@TL["SwitchTenancy"]</FluentLabel>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentTextField Style="width: 100%" Label="@TL["TenantName"]" @bind-Value="@TenantName"/>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack HorizontalAlignment="HorizontalAlignment.End" VerticalAlignment="VerticalAlignment.Bottom">
        <FluentButton Loading="@Loading" Appearance="Appearance.Accent"
                      OnClick="@OnSubmitBtnClickAsync">@UL["Submit"]</FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code {

    [CascadingParameter] protected FluentDialog? DialogRef { get; set; }

    [Inject] protected IAbpTenantAppService AbpTenantAppService { get; set; }
    [Inject] protected ICookieService CookieService { get; set; }
    [Inject] protected NavigationManager NavigationManager { get; set; }

    public string TenantName { get; set; }


    protected virtual bool Loading { get; set; }

    protected override void OnInitialized()
    {
        TenantName = CurrentTenant.Name;
    }

    protected virtual async Task OnSubmitBtnClickAsync()
    {
        Loading = true;
        try
        {
            if (TenantName.IsNullOrWhiteSpace())
            {
                // can not delete
                // await CookieService.DeleteAsync("__tenant", "/");
                
                await CookieService.SetAsync("__tenant",null,new CookieOptions()
                {
                    Path = "/",
                    ExpireDate = DateTimeOffset.UtcNow.AddDays(30),
                });
            }
            else
            {
                var tenant = await GetTenantAsync();
                await CookieService.SetAsync("__tenant", tenant.TenantId.ToString(), new CookieOptions()
                {
                    Path = "/",
                    ExpireDate = DateTimeOffset.UtcNow.AddDays(30),
                });
            }

            NavigationManager.Refresh();
        }
        catch (Exception e)
        {
            await HandleErrorAsync(e);
        }
        finally
        {
            Loading = false;
        }
    }

    protected virtual async Task<FindTenantResultDto?> GetTenantAsync()
    {
        var tenant = await AbpTenantAppService.FindTenantByNameAsync(TenantName);
        if (tenant == null)
        {
            throw new UserFriendlyException(L["TenantNotFoundMessage"]);
        }

        if (!tenant.IsActive)
        {
            throw new UserFriendlyException(L["TenantNotActiveDetails", tenant.Name]);
        }

        return tenant;
    }


}