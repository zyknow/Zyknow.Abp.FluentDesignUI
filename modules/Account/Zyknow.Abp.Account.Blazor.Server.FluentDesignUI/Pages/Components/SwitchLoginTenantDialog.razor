@using Localization.Resources.AbpUi
@using Microsoft.Extensions.Localization
@using Volo.Abp
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.AspNetCore.Mvc.MultiTenancy
@using TInput = string
@using TResource = Volo.Abp.MultiTenancy.Localization.AbpMultiTenancyResource
@implements IDialogContentComponent<TInput>
@inherits Volo.Abp.AspNetCore.Components.AbpComponentBase
@inject IStringLocalizer<TResource> TL
@inject IStringLocalizer<AbpUiResource> UL
<FluentDialogHeader ShowDismiss="true" ShowDismissTooltip="false">
    <FluentLabel Typo="Typography.H4">@TL["SwitchTenancy"]</FluentLabel>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentTextField Style="width: 100%" Label="@TL["TenantName"]" @bind-Value="@Content"/>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack HorizontalAlignment="HorizontalAlignment.End" VerticalAlignment="VerticalAlignment.Bottom">
        <FluentButton Loading="@Loading" Appearance="Appearance.Accent"
                      OnClick="@OnSubmitBtnClickAsync">@UL["Submit"]</FluentButton>

        @* <FluentButton Appearance="Appearance.Neutral" *@
        @*               OnClick="@(() => DialogRef.CloseAsync(DialogResult.Cancel))">@UL["Cancel"]</FluentButton> *@
    </FluentStack>
</FluentDialogFooter>

@code {

    [CascadingParameter] protected FluentDialog? DialogRef { get; set; }

    [Parameter] public TInput Content { get; set; }

    [Inject] protected IAbpTenantAppService AbpTenantAppService { get; set; }


    protected virtual bool Loading { get; set; }

    protected virtual async Task OnSubmitBtnClickAsync()
    {
        Loading = true;
        try
        {
            if (Content.IsNullOrWhiteSpace())
            {
                await DialogRef.CloseAsync(DialogResult.Ok<FindTenantResultDto>(null));
            }
            else
            {
                var tenant = await GetTenantAsync();
                await DialogRef.CloseAsync(DialogResult.Ok(tenant));
            }
        }
        catch (Exception e)
        {
            await HandleErrorAsync(e);
        }
        finally
        {
            Loading = false;
        }
    }

    protected virtual async Task<FindTenantResultDto?> GetTenantAsync()
    {
        var tenant = await AbpTenantAppService.FindTenantByNameAsync(Content);
        if (tenant == null)
        {
            throw new UserFriendlyException(L["TenantNotFoundMessage"]);
        }

        if (!tenant.IsActive)
        {
            throw new UserFriendlyException(L["TenantNotActiveDetails", tenant.Name]);
        }

        return tenant;
    }


}