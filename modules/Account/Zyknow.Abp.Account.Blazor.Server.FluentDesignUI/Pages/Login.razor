@page "/Account/Login"
@layout AccountPublicLayout
@rendermode RenderMode.InteractiveServer
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Caching.Distributed
@using Microsoft.Extensions.Options
@using Volo.Abp
@using Volo.Abp.Account.Localization
@using Volo.Abp.Account.Settings
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.AspNetCore.MultiTenancy
@using Volo.Abp.Caching
@using Volo.Abp.Identity
@using Volo.Abp.MultiTenancy
@using Volo.Abp.Security.Encryption
@using Volo.Abp.Settings
@using Zyknow.Abp.Account.Blazor.Server.FluentDesignUI.Pages.Components
@using IdentityUser = Volo.Abp.Identity.IdentityUser
@using Zyknow.Abp.AspnetCore.Components.Server.FluentDesignTheme.Themes.FluentDesignTheme
@inherits Zyknow.Abp.Account.Blazor.FluentDesignUI.AccountBlazorFluentDesignComponentBase

<div class="public-account-container">
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
        <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween"
                     VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel Typo="Typography.H2" Weight="FontWeight.Bold">@L["Login"]</FluentLabel>
            <LanguageSwitch/>
        </FluentStack>

        @* TODO:  should check ? *@
        @* MultiTenancyOptions.Value.IsEnabled && (TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(CookieTenantResolveContributor.ContributorName) == true || TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(QueryStringTenantResolveContributor.ContributorName) == true)  *@
        @if (MultiTenancyOptions.Value.IsEnabled)
        {
            <TenantSwitch/>
        }

        @if (IsSelfRegistrationEnabled)
        {
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentLabel>@L["AreYouANewUser"]</FluentLabel>
                <a href="@RegisterUrl">@L["Register"]</a>
            </FluentStack>
        }

        @if (EnableLocalLogin)
        {
            <AbpFluentForm @ref="FormRef" Content="@Input" Localize="@LH.Localize" SubmitClick="LoginAsync">
                <ChildContent>
                    <FluentTextField @bind-Value="@Input.UserNameOrEmailAddress"
                                     Label="@L["UserNameOrEmailAddress"]"/>
                    <ValidationMessage For="@(() => Input.UserNameOrEmailAddress)"></ValidationMessage>

                    <FluentTextField @bind-Value="@Input.Password" Label="@L["Password"]"
                                     TextFieldType="TextFieldType.Password"/>
                    <ValidationMessage For="@(() => Input.Password)"></ValidationMessage>

                    <FluentStack Style="margin-top: 20px" HorizontalAlignment="HorizontalAlignment.SpaceBetween"
                                 VerticalAlignment="VerticalAlignment.Center">
                        <FluentCheckbox @bind-Value="@Input.RememberMe" Label="@L["RememberMe"]"></FluentCheckbox>
                        <a href="@ForgotPasswordUrl">@L["ForgotPassword"]</a>
                    </FluentStack>
                </ChildContent>

                <Footer>
                    <FluentButton Disabled="@Loading" Style="height: 35px" Appearance="Appearance.Accent"
                                  OnClick="@FormRef.OnSubmitBtnClickAsync">@L["Login"]</FluentButton>
                </Footer>
            </AbpFluentForm>
        }
        @if (VisibleExternalProviders.Any())
        {
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel Typo="Typography.H5" c>@L["OrLoginWith"]</FluentLabel>

                <FluentStack>
                    @foreach (var provider in VisibleExternalProviders)
                    {
                        <FluentButton Style="height: 35px;" Loading="@Loading"
                                      Appearance="Appearance.Hypertext"
                                      OnClick="@(() => ExternalLoginAsync(provider.AuthenticationScheme))">@provider.DisplayName</FluentButton>
                    }
                </FluentStack>
            </FluentStack>
        }

        @if (!EnableLocalLogin && !VisibleExternalProviders.Any())
        {
            <FluentLabel Typo="Typography.Subject" Weight="FontWeight.Bold">@L["InvalidLoginRequest"]</FluentLabel>
            <FluentLabel Typo="Typography.Subject"
                         Weight="FontWeight.Bold">@L["ThereAreNoLoginSchemesConfiguredForThisClient"]</FluentLabel>
        }

    </FluentStack>
</div>

@code {
    [Inject] protected IDialogService DialogService { get; set; }
    [Inject] protected AbpBlazorMessageLocalizerHelper<AccountResource> LH { get; set; }
    [Inject] protected ISettingProvider SettingProvider { get; set; }
    [Inject] protected IAuthenticationSchemeProvider SchemeProvider { get; set; }
    [Inject] protected IOptions<AbpAccountOptions> AccountOptions { get; set; }
    [Inject] protected IOptions<AbpMultiTenancyOptions> MultiTenancyOptions { get; set; }
    [Inject] protected IOptions<IdentityOptions> IdentityOptions { get; set; }
    [Inject] protected IdentityDynamicClaimsPrincipalContributorCache IdentityDynamicClaimsPrincipalContributorCache { get; set; }
    [Inject] protected IWebHostEnvironment WebHostEnvironment { get; set; }
    [Inject] protected SignInManager<IdentityUser> SignInManager { get; set; }
    [Inject] protected UserManager<IdentityUser> UserManager { get; set; }
    [Inject] protected IDistributedCache<LoginTicketCacheItem> LoginTicketCache { get; set; }
    [Inject] protected IStringEncryptionService StringEncryptionService { get; set; }
    [Inject] protected ITenantResolveResultAccessor TenantResolveResultAccessor { get; set; }


    AbpFluentForm<LoginInput> FormRef;

    protected virtual LoginInput Input { get; set; } = new();

    [SupplyParameterFromQuery] protected string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] protected string? ReturnUrlHash { get; set; }
    // [SupplyParameterFromQuery] protected Guid? __tenant { get; set; }

    protected virtual string ForgotPasswordUrl { get; set; }
    protected virtual bool IsSelfRegistrationEnabled { get; set; }
    protected virtual string RegisterUrl { get; set; }
    protected virtual bool EnableLocalLogin { get; set; }

    // TODO: init these values ?
    protected virtual bool ShowCancelButton { get; set; }
    protected virtual bool ShowRequireMigrateSeedMessage { get; set; }

    protected virtual bool Loading { get; set; }

    //TODO: Why there is an ExternalProviders if only the VisibleExternalProviders is used.
    public IEnumerable<ExternalProviderModel> ExternalProviders { get; set; }
    public IEnumerable<ExternalProviderModel> VisibleExternalProviders => ExternalProviders.Where(x => !String.IsNullOrWhiteSpace(x.DisplayName));

    protected virtual bool IsExternalLoginOnly => EnableLocalLogin == false && ExternalProviders?.Count() == 1;


    protected override async Task OnInitializedAsync()
    {
        ForgotPasswordUrl = NavigationManager.GetUriWithQueryParameters("/Account/ForgotPassword",
            new Dictionary<string, object>
            {
                [nameof(ReturnUrl)] = ReturnUrl,
                [nameof(ReturnUrlHash)] = ReturnUrlHash,
                // [nameof(__tenant)] = __tenant
            });

        RegisterUrl = NavigationManager.GetUriWithQueryParameters("/Account/Register",
            new Dictionary<string, object>
            {
                [nameof(ReturnUrl)] = ReturnUrl,
                [nameof(ReturnUrlHash)] = ReturnUrlHash,
                // [nameof(__tenant)] = __tenant
            });

        IsSelfRegistrationEnabled = await SettingProvider.IsTrueAsync(AccountSettingNames.IsSelfRegistrationEnabled);
        ExternalProviders = await GetExternalProviders();
        EnableLocalLogin = await SettingProvider.IsTrueAsync(AccountSettingNames.EnableLocalLogin);
        if (IsExternalLoginOnly)
        {
            await ExternalLoginAsync(ExternalProviders.First().AuthenticationScheme);
        }
    }

    protected virtual async Task LoginAsync()
    {
        Loading = true;
        try
        {
            var user = await UserManager.FindByNameAsync(Input.UserNameOrEmailAddress);
            if (user == null)
            {
                user = await UserManager.FindByEmailAsync(Input.UserNameOrEmailAddress);
            }

            if (user == null)
            {
                throw new UserFriendlyException(L["InvalidUserNameOrPassword"]);
            }

            var result = await SignInManager.CheckPasswordSignInAsync(user, Input.Password, lockoutOnFailure: true);
            if (!result.Succeeded)
            {
                if (result.IsLockedOut)
                {
                    throw new UserFriendlyException(L["UserLockedOutMessage"]);
                }

                if (result.IsNotAllowed)
                {
                    throw new UserFriendlyException(L["LoginIsNotAllowed"]);
                }

                if (result.RequiresTwoFactor)
                {
                    // TODO: Handle two-factor authentication ?
                    throw new UserFriendlyException(L["TwoFactorAuthenticationRequired"]);
                }

                throw new UserFriendlyException(L["InvalidUserNameOrPassword"]);
            }

            var ticket = $@"{Guid.NewGuid().ToString("N")}";
            var cacheItem = new LoginTicketCacheItem
            {
                UserId = user.Id,
                TenantId = Input.TenantId,
                UserNameOrEmailAddress = Input.UserNameOrEmailAddress,
                RememberMe = Input.RememberMe,
                ReturnUrl = ReturnUrl,
                ReturnUrlHash = ReturnUrlHash
            };
            await LoginTicketCache.SetAsync(ticket, cacheItem, new DistributedCacheEntryOptions()
            {
                AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5)
            });

            var redirectUrl = NavigationManager.GetUriWithQueryParameters("/Account/LoginSucceededRedirect",
                new Dictionary<string, object>
                {
                    ["ticket"] = ticket
                });
            NavigationManager.NavigateTo(redirectUrl, forceLoad: true);
        }
        catch (Exception e)
        {
            Alerts.Danger(GetLocalizeExceptionMessage(e));
            Loading = false;
        }
    }

    protected virtual async Task ExternalLoginAsync(string provider)
    {
        Loading = true;
        var redirectUrl = NavigationManager.GetUriWithQueryParameters("api/Account/ExternalLogin",
            new Dictionary<string, object>
            {
                ["provider"] = provider,
                [nameof(ReturnUrl)] = Uri.EscapeDataString(ReturnUrl),
                [nameof(ReturnUrlHash)] = Uri.EscapeDataString(ReturnUrlHash)
            });
        NavigationManager.NavigateTo(redirectUrl, forceLoad: true);
        Loading = false;
    }

    protected virtual async Task<List<ExternalProviderModel>> GetExternalProviders()
    {
        var schemes = await SchemeProvider.GetAllSchemesAsync();

        return schemes
            .Where(x => x.DisplayName != null || x.Name.Equals(AccountOptions.Value.WindowsAuthenticationSchemeName, StringComparison.OrdinalIgnoreCase))
            .Select(x => new ExternalProviderModel
            {
                DisplayName = x.DisplayName,
                AuthenticationScheme = x.Name
            })
            .ToList();
    }

}