@inherits AccountBlazorFluentDesignComponentBase
@inject AbpBlazorMessageLocalizerHelper<AccountResource> LH
@inject IProfileAppService ProfileAppService
<FluentStack>
    <FluentLabel Typo="Typography.H4" Weight="FontWeight.Bold">@L["ChangePassword"]</FluentLabel>
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentCard>
            <AbpDialogForm Content="Input" SubmitClick="ChangePasswordAsync" Localize="@LH.Localize">
                <Header>
                    <FluentLabel Weight="FontWeight.Bold" Typo="Typography.H2">@L["ChangePassword"]</FluentLabel>
                </Header>
                <ChildContent>
                    <FluentTextField Style="width: 100%" TextFieldType="TextFieldType.Password"
                                     @bind-Value="Input.CurrentPassword"
                                     Label="@L["DisplayName:CurrentPassword"]"></FluentTextField>
                    <ValidationMessage For="@(() => Input.CurrentPassword)"></ValidationMessage>
                    
                    <FluentTextField Style="width: 100%" TextFieldType="TextFieldType.Password"
                                     @bind-Value="Input.NewPassword"
                                     Label="@L["DisplayName:NewPassword"]"></FluentTextField>
                    <ValidationMessage For="@(() => Input.NewPassword)"></ValidationMessage>

                    <FluentTextField Style="width: 100%" TextFieldType="TextFieldType.Password"
                                     @bind-Value="Input.NewPasswordConfirm"
                                     Label="@L["DisplayName:NewPasswordConfirm"]"></FluentTextField>
                    <ValidationMessage For="@(() => Input.NewPasswordConfirm)"></ValidationMessage>
                </ChildContent>
            </AbpDialogForm>
        </FluentCard>
    </FluentStack>
</FluentStack>

@code {
    protected ChangePasswordModel Input = new ChangePasswordModel();
    
    protected async Task ChangePasswordAsync()
    {
        if (string.IsNullOrWhiteSpace(Input.CurrentPassword))
        {
            return;
        }

        if (Input.NewPassword != Input.NewPasswordConfirm)
        {
            await UiMessageService.Warn(L["NewPasswordConfirmFailed"]);
            return;
        }

        if (Input.CurrentPassword == Input.NewPassword)
        {
            await UiMessageService.Warn(L["NewPasswordSameAsOld"]);
            return;
        }

        await ProfileAppService.ChangePasswordAsync(new ChangePasswordInput
        {
            CurrentPassword = Input.CurrentPassword,
            NewPassword = Input.NewPassword
        });

        Input.Clear();

        await UiMessageService.Success(L["PasswordChanged"]);
    }
}