@using Volo.Abp.Localization
@using System.Collections.Immutable
@using System.Globalization
@using Microsoft.JSInterop
@inject ILanguageProvider LanguageProvider
@inject IJSRuntime JsRuntime

@if (_otherLanguages != null && _otherLanguages.Any())
{
    <FluentMenuButton
        ButtonAppearance="@Appearance.Neutral"
        Text="@_currentLanguage.DisplayName"
        Items="@_menuItems"
        OnMenuChanged="args => ChangeLanguageAsync(_otherLanguages.First(x => x.CultureName == args.Id))">
    </FluentMenuButton>
}


@code {
    private IReadOnlyList<LanguageInfo>? _otherLanguages;
    private LanguageInfo _currentLanguage;
    Dictionary<string, string> _menuItems = [];

    protected override async Task OnInitializedAsync()
    {
        var selectedLanguageName = await JsRuntime.InvokeAsync<string>(
            "localStorage.getItem",
            "Abp.SelectedLanguage"
        );

        _otherLanguages = await LanguageProvider.GetLanguagesAsync();

        if (!_otherLanguages.Any())
        {
            return;
        }

        if (!selectedLanguageName.IsNullOrWhiteSpace())
        {
            _currentLanguage = _otherLanguages.FirstOrDefault(l => l.UiCultureName == selectedLanguageName);
        }

        if (_currentLanguage == null)
        {
            _currentLanguage = _otherLanguages.FirstOrDefault(l => l.UiCultureName == CultureInfo.CurrentUICulture.Name);
        }

        if (_currentLanguage == null)
        {
            _currentLanguage = _otherLanguages.FirstOrDefault();
        }

        _otherLanguages = _otherLanguages.Where(l => l != _currentLanguage).ToImmutableList();
        _menuItems = _otherLanguages.ToDictionary(l => l.CultureName, l => l.DisplayName);
    }

    protected virtual async Task ChangeLanguageAsync(LanguageInfo language)
    {
        await JsRuntime.InvokeVoidAsync(
            "localStorage.setItem",
            "Abp.SelectedLanguage", language.UiCultureName
        );

        await JsRuntime.InvokeVoidAsync(
            "localStorage.setItem",
            "Abp.IsRtl", CultureInfo.GetCultureInfo(language.UiCultureName).TextInfo.IsRightToLeft
        );

        await JsRuntime.InvokeVoidAsync("location.reload");
    }

}
