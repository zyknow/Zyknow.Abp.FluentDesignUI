@using Volo.Abp.Users
@using Volo.Abp.MultiTenancy
@using Microsoft.Extensions.Localization
@using global::Localization.Resources.AbpUi
@using Microsoft.Extensions.Options
@using Volo.Abp.UI.Navigation
@inject ICurrentUser CurrentUser
@inject ICurrentTenant CurrentTenant
@inject IStringLocalizer<AbpUiResource> L
@inject NavigationManager NavigationManager
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <FluentProfileMenu
            Status="@PresenceStatus.Available"
            HeaderLabel="@GetProfileFullName()"
            Initials="@CurrentUser.UserName?.FirstOrDefault().ToString()"
            FullName="@CurrentUser.UserName"
            HeaderButton="@(L["Logout"])"
            EMail="@CurrentUser.Email"
            OnHeaderButtonClick="LogoutAsync"
            PopoverStyle="min-width: 330px;">
            <FooterTemplate>
                <MediaQuery Media="@ThemeOptions.Value.MobileBreakpoint" @bind-Matches="IsMobileStyle"/>
                
                @if (Menu != null)
                {
                    <FluentStack Wrap="true">
                        @foreach (var menuItem in Menu.Items.Where(x => x.DisplayName != L["Logout"]))
                        {
                            <FluentButton Appearance="Appearance.Stealth"
                                          OnClick="@(() => NavigateToAsync(menuItem.Url, menuItem.Target))">@menuItem.DisplayName</FluentButton>
                        }
                    </FluentStack>
                }
            </FooterTemplate>
            <EndTemplate>
                <FluentLabel Color="Color.Neutral">
                    @if (CurrentTenant.Name != null)
                    {
                        <span><i>@CurrentTenant.Name</i>\@CurrentUser.UserName</span>
                    }
                    else
                    {
                        <span>@CurrentUser.UserName</span>
                    }
                </FluentLabel>
            </EndTemplate>
        </FluentProfileMenu>
    </Authorized>
    <NotAuthorized>
        <FluentButton Appearance="Appearance.Stealth"
                      OnClick="LoginAsync">@L["Login"]</FluentButton>
    </NotAuthorized>
</AuthorizeView>

@code
{
    [Inject] protected IMenuManager MenuManager { get; set; }
    [Inject] protected IJSRuntime JsRuntime { get; set; }
    [Inject] protected IOptions<AuthenticationOptions> AuthenticationOptions { get; set; }
    [Inject] IOptions<AbpFluentDesignThemeOptions> ThemeOptions { get; set; }

    protected ApplicationMenu Menu { get; set; }
    protected bool IsMobileStyle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Menu = await MenuManager.GetAsync(StandardMenus.User);

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected virtual void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    string GetProfileFullName()
    {
        @if (CurrentTenant.Name != null)
        {
            return $"{CurrentTenant.Name}\\{CurrentUser.UserName}";
        }
        else
        {
            return $"{CurrentUser.UserName}";
        }
    }

    async Task LogoutAsync()
    {
        NavigationManager.NavigateTo(AuthenticationOptions.Value.LogoutUrl, forceLoad: true);
    }

    async Task LoginAsync()
    {
        NavigationManager.NavigateTo(AuthenticationOptions.Value.LoginUrl, forceLoad: true);
    }

    private async Task NavigateToAsync(string uri, string target = null)
    {
        uri = uri?.TrimStart('/', '~');
        if (target == "_blank")
        {
            await JsRuntime.InvokeVoidAsync("open", uri, target);
        }
        else
        {
            NavigationManager.NavigateTo(uri);
        }
    }
}
