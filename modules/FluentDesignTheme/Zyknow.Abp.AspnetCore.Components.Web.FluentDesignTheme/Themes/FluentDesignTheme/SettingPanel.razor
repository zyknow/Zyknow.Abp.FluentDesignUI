@using Localization.Resources.AbpUi
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Volo.Abp.AspNetCore.Components.Web
@implements IDialogContentComponent
@inject IStringLocalizer<AbpUiResource> L
@inject IThemeStore ThemeStore
@inject ICookieService CookieService
@inject NavigationManager NavigationManager
@inject IOptions<AbpFluentDesignThemeOptions> ThemeOptions
<FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch" VerticalGap="20">
    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch">
        <FluentLabel Typo="Typography.H6" Weight="FontWeight.Bold">@L["ThemeSettings"]</FluentLabel>
        <FluentDivider Orientation="Orientation.Horizontal"/>
        <FluentSelect Label="@L["Theme"]"
                      Width="100%"
                      Items="@(Enum.GetValues<DesignThemeModes>())"
                      @bind-SelectedOption="@ThemeStore.ThemeMode"/>
        <FluentSelect Label="@L["Color"]"
                      Items="@(Enum.GetValues<OfficeColor>().Select(i => i))"
                      Height="500px"
                      Width="100%"
                      @bind-SelectedOption="@ThemeStore.Color">
            <OptionTemplate>
                <FluentStack>
                    <FluentIcon Value="@(new Size20.RectangleLandscape())"
                                Color="Color.Custom"
                                CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4")"/>
                    <FluentLabel>@context</FluentLabel>
                </FluentStack>
            </OptionTemplate>
        </FluentSelect>
    </FluentStack>

    @if (ThemeOptions.Value.RenderModeChangeEnabled)
    {
        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch">

            <FluentLabel Typo="Typography.H6" Weight="FontWeight.Bold">@L["RenderModeSettings"]</FluentLabel>
            <FluentDivider Orientation="Orientation.Horizontal"/>
            <FluentSelect
                TOption="string"
                Items="@RenderModeList"
                Width="100%"
                OptionText="@(x => x.Replace("Interactive", "").Replace("RenderMode", ""))"
                Label="@L["RenderMode"]"
                SelectedOption="@CurrentRenderMode"
                SelectedOptionChanged="@((v) => ChangeRenderModeAsync(v, Prerender))">
            </FluentSelect>
            
            <FluentSwitch Style="margin-top: 10px" Label="@L["Prerender"]" Value="@Prerender"
                          ValueChanged="@((v) => ChangeRenderModeAsync(CurrentRenderMode, v))">

            </FluentSwitch>
        </FluentStack>
    }


</FluentStack>

@code{

    public static string[] RenderModeList =
    [
        nameof(InteractiveAutoRenderMode),
        nameof(InteractiveServerRenderMode),
        nameof(InteractiveWebAssemblyRenderMode)
    ];

    protected string CurrentRenderMode { get; set; }

    protected bool Prerender { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (ThemeOptions.Value.RenderModeChangeEnabled)
            {
                CurrentRenderMode = await CookieService.GetAsync("RenderMode");
                var prerenderStr = await CookieService.GetAsync("Prerender");
                if (!prerenderStr.IsNullOrEmpty())
                {
                    Prerender = bool.Parse(prerenderStr);
                }
                else
                {
                    Prerender = true;
                }

                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task ChangeRenderModeAsync(string renderMode, bool prerender = false)
    {
        CurrentRenderMode = renderMode;
        Prerender = prerender;
        await CookieService.SetAsync("RenderMode", renderMode);
        await CookieService.SetAsync("Prerender", prerender.ToString());
        NavigationManager.Refresh(forceReload: true);
    }

}