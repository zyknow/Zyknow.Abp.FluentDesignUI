@inherits LayoutComponentBase
@using Microsoft.Extensions.Options
@using Zyknow.Abp.FluentDesignUI.Components
@implements IDisposable

<MediaQuery Media="@ThemeOptions.Value.MobileBreakpoint" Matches="@IsMobileStyle"
            MatchesChanged="@(v =>
                            {
                                IsMobileStyle = v;
                                Collapsed = !IsMobileStyle;
                            })"/>
<FluentLayout Class="fluent-design-layout">
    @if (ThemeStore.LayoutTheme == FluentLayoutTheme.Default)
    {
        <FluentHeader Class="fluent-design-layout-default-header">
            <FluentStack HorizontalGap="20" Orientation="Orientation.Horizontal"
                         HorizontalAlignment="HorizontalAlignment.Left"
                         VerticalAlignment="VerticalAlignment.Center">
                <Branding CollapsedMenuIconVisible="true" CollapsedMenuClick="OnCollapse"/>
            </FluentStack>
            <FluentSpacer/>
            @if (!IsMobileStyle)
            {
                <NavToolbar/>
            }
            else
            {
                <LoginDisplay/>
            }
        </FluentHeader>
    }
    else if (ThemeStore.LayoutTheme == FluentLayoutTheme.Rounded)
    {
        <div class="fluent-design-layout-rounded-header">
            <FluentStack Style="height: 100%" VerticalAlignment="VerticalAlignment.Center">
                <FluentStack HorizontalGap="20" Orientation="Orientation.Horizontal"
                             HorizontalAlignment="HorizontalAlignment.Left"
                             VerticalAlignment="VerticalAlignment.Center">
                    <Branding CollapsedMenuIconVisible="true" CollapsedMenuClick="OnCollapse"/>
                </FluentStack>
                <FluentStack HorizontalAlignment="HorizontalAlignment.End">
                    @if (!IsMobileStyle)
                    {
                        <NavToolbar/>
                    }
                    else
                    {
                        <LoginDisplay/>
                    }
                </FluentStack>
            </FluentStack>
        </div>
    }

    <FluentStack HorizontalAlignment="HorizontalAlignment.Stretch"
                 VerticalAlignment="VerticalAlignment.Stretch"
                 HorizontalGap="0" Style="flex:1;min-height: 0;">

        <MainMenu IsMobile="IsMobileStyle" Collapsed="Collapsed"/>

        <FluentBodyContent Class="fluent-design-body-content"
                           Style="@(IsMobileStyle && Collapsed ? "display: none !important" : "")">
            <PageAlert/>
            @Body
            @* <UiPageProgress/> *@
        </FluentBodyContent>

    </FluentStack>
    <FluentFooter>
        @if (ThemeOptions.Value.DefaultLayoutFooterType != null)
        {
            <DynamicComponent Type="@ThemeOptions.Value.DefaultLayoutFooterType"/>
        }
    </FluentFooter>

    <FluentDialogProvider/>
    <FluentTooltipProvider/>
    <FluentMessageBarProvider/>
    <FluentMenuProvider/>
    @if (IsMobileStyle)
    {
        <FluentToastProvider Position="ToastPosition.BottomCenter"/>
    }
    else
    {
        <FluentToastProvider Position="ToastPosition.BottomRight"/>
    }
</FluentLayout>

@code
{
    protected bool Collapsed { get; set; } = true;

    [Inject] protected IEnumerable<IBlazorStore> Stores { get; set; }

    [Inject] protected IThemeStore ThemeStore { get; set; }

    [Inject] protected NavigationManager NavigationManager { get; set; }

    [Inject] IOptions<AbpFluentDesignThemeOptions> ThemeOptions { get; set; }

    [Inject] IDialogService DialogService { get; set; }

    protected bool IsMobileStyle { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await SetLayout();
        ThemeStore.ThemeModeChanged += OnSettingChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (IsMobileStyle)
        {
            Collapsed = false;
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var blazorStore in Stores)
            {
                await blazorStore.InitializeAsync();
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    protected virtual async void OnSettingChanged(object? sender, EventArgs e)
    {
        try
        {
            await SetLayout();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
        }
    }

    private async Task SetLayout()
    {
    }

    protected virtual void OnCollapse()
    {
        Collapsed = !Collapsed;
    }

    public void Dispose()
    {
        ThemeStore.ThemeModeChanged -= OnSettingChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

