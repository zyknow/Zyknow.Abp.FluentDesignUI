@inherits LayoutComponentBase
@using Microsoft.Extensions.Options
@using Zyknow.Abp.FluentDesignUI.Components
@inject IOptions<AbpFluentDesignThemeOptions> Options

<FluentLayout Class="fluent-design-layout">
    <FluentHeader>
        <FluentStack HorizontalGap="20" Orientation="Orientation.Horizontal"
                     HorizontalAlignment="HorizontalAlignment.Left"
                     VerticalAlignment="VerticalAlignment.Center">
            <Branding CollapsedMenuIconVisible="true" CollapsedMenuClick="OnCollapse"/>
        </FluentStack>
        <FluentSpacer/>
        <NavToolbar/>
    </FluentHeader>

    <FluentStack HorizontalAlignment="HorizontalAlignment.Stretch"
                 VerticalAlignment="VerticalAlignment.Stretch" Style="height: calc(100vh - 50px);width: 100%"
                 HorizontalGap="0">
        <MainMenu Collapsed="@Collapsed"/>
        <FluentBodyContent Class="fluent-design-body-content">
            <PageAlert/>
            @Body
            @* TODO: EnableMultipleTabs ? *@
            @* @if (!Options.Value.EnableMultipleTabs) *@
            @* { *@
            @*     @Body *@
            @* } *@
            @* else *@
            @* { *@
            @*     <ReuseTabs Class="fluent-design-body-reusetabs" TabPaneClass="fluent-design-body-reusetabs-tabpane" *@
            @*                Draggable></ReuseTabs> *@
            @* } *@
            <FluentDialogProvider/>
            <FluentTooltipProvider/>
            <FluentMessageBarProvider/>
            <FluentMenuProvider/>
            <FluentToastProvider Position="ToastPosition.BottomRight"/>
            @* <UiPageProgress/> *@
        </FluentBodyContent>
    </FluentStack>

    <FluentFooter>

    </FluentFooter>

</FluentLayout>

@code
{
    protected bool Collapsed { get; set; } = true;

    [Inject] protected IEnumerable<IBlazorStore> Stores { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SetLayout();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var blazorStore in Stores)
            {
                await blazorStore.InitializeAsync();
            }
        }
    }

    protected virtual async Task OnSettingChanged()
    {
        await SetLayout();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetLayout()
    {
    }

    protected virtual void OnCollapse()
    {
        Collapsed = !Collapsed;
        StateHasChanged();
    }
}

