@inherits LayoutComponentBase
@using Zyknow.Abp.FluentDesignUI.Components
@implements IDisposable
<FluentLayout Class="fluent-design-layout">
    @if (ThemeStore.LayoutTheme == FluentLayoutTheme.Default)
    {
        <FluentHeader Class="fluent-design-layout-default-header">
            <FluentStack HorizontalGap="20" Orientation="Orientation.Horizontal"
                         HorizontalAlignment="HorizontalAlignment.Left"
                         VerticalAlignment="VerticalAlignment.Center">
                <Branding CollapsedMenuIconVisible="true" CollapsedMenuClick="OnCollapse"/>
            </FluentStack>
            <FluentSpacer/>
            <NavToolbar/>
        </FluentHeader>
    }
    else if (ThemeStore.LayoutTheme == FluentLayoutTheme.Rounded)
    {
        <div class="fluent-design-layout-rounded-header">
            <div class="fluent-design-layout-rounded-header-inner-content">
                <FluentStack
                    Style="padding: 0;height: 50px" VerticalAlignment="VerticalAlignment.Center">
                    <FluentStack HorizontalGap="20" Orientation="Orientation.Horizontal"
                                 HorizontalAlignment="HorizontalAlignment.Left"
                                 VerticalAlignment="VerticalAlignment.Center">
                        <Branding CollapsedMenuIconVisible="true" CollapsedMenuClick="OnCollapse"/>
                    </FluentStack>
                    <FluentStack>
                        <NavToolbar/>
                    </FluentStack>
                </FluentStack>
            </div>
        </div>
    }

    <FluentStack HorizontalAlignment="HorizontalAlignment.Stretch"
                 VerticalAlignment="VerticalAlignment.Stretch" Style="@(@$"height: calc(100vh - {GetHeaderHeight()});")"
                 HorizontalGap="0">
        <MainMenu Collapsed="@Collapsed"/>
        <FluentBodyContent Class="fluent-design-body-content">
            <PageAlert/>
            @Body
            @* TODO: EnableMultipleTabs ? *@
            @* @if (!Options.Value.EnableMultipleTabs) *@
            @* { *@
            @*     @Body *@
            @* } *@
            @* else *@
            @* { *@
            @*     <ReuseTabs Class="fluent-design-body-reusetabs" TabPaneClass="fluent-design-body-reusetabs-tabpane" *@
            @*                Draggable></ReuseTabs> *@
            @* } *@
            <FluentDialogProvider/>
            <FluentTooltipProvider/>
            <FluentMessageBarProvider/>
            <FluentMenuProvider/>
            <FluentToastProvider Position="ToastPosition.BottomRight"/>
            @* <UiPageProgress/> *@
        </FluentBodyContent>
    </FluentStack>


</FluentLayout>

@code
{
    protected bool Collapsed { get; set; } = true;

    [Inject] protected IEnumerable<IBlazorStore> Stores { get; set; }

    [Inject] protected IThemeStore ThemeStore { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SetLayout();
        ThemeStore.ThemeModeChanged += OnSettingChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var blazorStore in Stores)
            {
                await blazorStore.InitializeAsync();
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    protected virtual async void OnSettingChanged(object? sender, EventArgs e)
    {
        try
        {
            await SetLayout();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
        }
    }

    private async Task SetLayout()
    {
    }

    protected virtual void OnCollapse()
    {
        Collapsed = !Collapsed;
        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeStore.ThemeModeChanged -= OnSettingChanged;
    }

    string GetHeaderHeight()
    {
        if (ThemeStore.LayoutTheme == FluentLayoutTheme.Default)
        {
            return "50px";
        }
        else if (ThemeStore.LayoutTheme == FluentLayoutTheme.Rounded)
        {
            return "70px";
        }

        return "70px";
    }
}

