@using Volo.Abp.AspNetCore.Components.Web.Security
@using Volo.Abp.UI.Navigation
@implements IDisposable
@inherits FluentComponentBase
<div id="@Id" class="@ClassValue" style="@StyleValue"
     @attributes="AdditionalAttributes">

    @if (IsMobile)
    {
        <FluentStack Class="fluent-card">
            <NavToolbar IgnoreTypes="@( [typeof(LoginDisplay)])"></NavToolbar>
        </FluentStack>

        <FluentDivider Orientation="Orientation.Horizontal"></FluentDivider>
    }

    <div class="fluent-design-navmenu-content">
        <FluentNavMenu Width="@(IsMobile ? null : 250)" Expanded="@Collapsed"
                       CollapsedChildNavigation>
            @if (Menu != null)
            {
                @foreach (var menu in Menu.Items)
                {
                    <MainMenuItem Menu="@menu" FirstLevel OnExpandParent="@StateHasChanged"></MainMenuItem>
                }
            }
        </FluentNavMenu>
    </div>
</div>

@code
{
    protected ApplicationMenu Menu { get; set; }

    [Parameter] public bool IsMobile { get; set; }

    [Inject] protected IMenuManager MenuManager { get; set; }

    [Inject] NavigationManager NavigationManager { get; set; }

    [Inject] protected ApplicationConfigurationChangedService ApplicationConfigurationChangedService { get; set; }

    [Parameter] public bool Collapsed { get; set; }


    protected string ClassValue => IsMobile ? $"{Class} fluent-design-mobile-navmenu-content-card" : $"{Class} fluent-design-navmenu-content-card";

    protected string StyleValue => $@"{Style} {(IsMobile && !Collapsed ? "display:none" : "")}";

    protected override async Task OnInitializedAsync()
    {
        await GetMenuAsync();
        ApplicationConfigurationChangedService.Changed += ApplicationConfigurationChanged;
    }

    private async Task GetMenuAsync()
    {
        Menu = await MenuManager.GetMainMenuAsync();
    }

    private async void ApplicationConfigurationChanged()
    {
        await GetMenuAsync();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ApplicationConfigurationChangedService.Changed -= ApplicationConfigurationChanged;
    }
}
