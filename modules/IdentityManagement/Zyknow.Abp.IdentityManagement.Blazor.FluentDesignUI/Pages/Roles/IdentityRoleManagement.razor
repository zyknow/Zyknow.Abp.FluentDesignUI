@page "/identity/roles"
@attribute [Authorize(IdentityPermissions.Roles.Default)]
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Filled
@using Volo.Abp.ObjectExtending
@using Zyknow.Abp.AspnetCore.Components.Web.FluentDesignTheme.PageToolbars
@using Zyknow.Abp.PermissionManagement.Blazor.FluentDesignUI.Components
@using Size16 = Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16
@inherits Zyknow.Abp.FluentDesignUI.AbpCrudPageBase<IIdentityRoleAppService, IdentityRoleDto, Guid, GetIdentityRolesInput, IdentityRoleCreateDto, IdentityRoleUpdateDto>

<FluentAdaptiveCard>
    <AbpPageHeader Title="@L["Roles"]" BreadcrumbItems="@BreadcrumbItems" Toolbar="@Toolbar"/>
    <AbpSearch Loading="@Loading" @bind-PrimarySearchValue="GetListInput.Filter"
               OnSearch="SearchEntitiesAsync"></AbpSearch>
    <AbpExtensibleDataGrid Loading="@Loading"
                           Entities="Entities"
                           TKey="Guid"
                           TItem="IdentityRoleDto"
                           EnableSelected="true"
                           OnDeleteSelected="DeleteEntitiesAsync"
                           PrimarySelectedDeletesBtnVisible="@HasDeletePermission"
                           DeleteSelectedDisplayPropertyConfirmExpression="@(r => r.Name)"
                           OnChange="@OnDataGridReadAsync"
                           Pagination="@Pagination"
                           Columns="@RoleManagementTableColumns">
    </AbpExtensibleDataGrid>
</FluentAdaptiveCard>

@code
{
    protected const string PermissionProviderName = "R";

    protected PageToolbar Toolbar { get; } = new();

    protected bool HasManagePermissionsPermission { get; set; }


    protected bool PermissionDialogHidden = true;

    protected List<FluentTableColumn> RoleManagementTableColumns => TableColumns.Get<IdentityRoleManagement>();

    public IdentityRoleManagement()
    {
        ObjectMapperContext = typeof(AbpIdentityBlazorFluentDesignModule);
        LocalizationResource = typeof(IdentityResource);

        CreatePolicyName = IdentityPermissions.Roles.Create;
        UpdatePolicyName = IdentityPermissions.Roles.Update;
        DeletePolicyName = IdentityPermissions.Roles.Delete;
    }

    protected override ValueTask SetBreadcrumbItemsAsync()
    {
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["Menu:IdentityManagement"], icon: new Size16.People()));
        BreadcrumbItems.Add(new AbpBreadcrumbItem(L["Roles"]));

        return base.SetBreadcrumbItemsAsync();
    }

    protected override async Task SetPermissionsAsync()
    {
        await base.SetPermissionsAsync();

        HasManagePermissionsPermission = await AuthorizationService.IsGrantedAsync(IdentityPermissions.Roles.ManagePermissions);
    }

    protected override string GetDeleteConfirmationMessage(IdentityRoleDto entity)
    {
        return string.Format(L["RoleDeletionConfirmationMessage"], entity.Name);
    }

    protected override ValueTask SetToolbarItemsAsync()
    {
        Toolbar.AddButton(L["NewRole"],
            OpenCreateDialogAsync,
            new Size20.Add(),
            requiredPolicyName: CreatePolicyName);

        return base.SetToolbarItemsAsync();
    }

    protected override ValueTask SetEntityActionsAsync()
    {
        EntityActions
            .Get<IdentityRoleManagement>()
            .AddRange([
                new()
                {
                    Text = L["Edit"],
                    Visible = (data) => HasUpdatePermission,
                    Clicked = async (data) => { await OpenEditDialogAsync(data.As<IdentityRoleDto>()); }
                },
                new()
                {
                    Text = L["Permissions"],
                    Visible = (data) => HasManagePermissionsPermission,
                    Clicked = async (data) =>
                    {
                        var role = data.As<IdentityRoleDto>();
                        await ShowPermissionDialogAsync(new PermissionManagementDialogInput(PermissionProviderName, role.Name));
                        InvokeAsync(StateHasChanged);
                    }
                },
                new()
                {
                    Text = L["Delete"],
                    Color = "red",
                    Visible = (data) => HasDeletePermission,
                    Clicked = async (data) => await DeleteEntityAsync(data.As<IdentityRoleDto>()),
                    ConfirmationMessage = (data) => GetDeleteConfirmationMessage(data.As<IdentityRoleDto>())
                }
            ]);

        return base.SetEntityActionsAsync();
    }

    protected override ValueTask SetTableColumnsAsync()
    {
        RoleManagementTableColumns
            .AddRange([
                new FluentTableColumn
                {
                    Title = L["RoleName"],
                    Sortable = true,
                    Data = nameof(IdentityRoleDto.Name),
                    PropertyName = nameof(IdentityRoleDto.Name)
                }
            ]);

        RoleManagementTableColumns.AddRange(GetExtensionTableColumns(IdentityModuleExtensionConsts.ModuleName,
            IdentityModuleExtensionConsts.EntityNames.Role));

        RoleManagementTableColumns.Add(new FluentTableColumn
        {
            Title = L["Actions"],
            Actions = EntityActions.Get<IdentityRoleManagement>()
        });

        return base.SetTableColumnsAsync();
    }

    protected virtual Task ShowPermissionDialogAsync(PermissionManagementDialogInput input)
        => ShowDialogAsync(@<PermissionManagementDialog Content="@input"/>, opt => { opt.Width = "700px"; });

    protected override Task ShowCreateDialogAsync()
        => ShowDialogAsync(@<IdentityRoleCreateDialog Content="@NewEntity" SubmitClick="CreateEntityAsync"/>);

    protected override Task ShowEditDialogAsync()
        => ShowDialogAsync(@<IdentityRoleEditDialog Content="@EditingEntity" SubmitClick="UpdateEntityAsync"/>);
}
