@using Volo.Abp.AspNetCore.Components.Alerts
@using System.Collections.Specialized
@inherits FluentComponentBase
<FluentStack Orientation="@Orientation.Vertical" VerticalGap="8" @attributes="AdditionalAttributes">
    @foreach (var message in _messages)
    {
        <FluentMessageBar Intent="@GetMessageIntent(message.Type)" AllowDismiss="true"  Title="@message.Title">
            @message.Text
        </FluentMessageBar>
    }

</FluentStack>


@code {

    private readonly List<AlertMessage> _messages = new();

    [Inject]
    public IAlertManager AlertManager { get; set; }
    
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    
    
    protected MessageIntent GetMessageIntent(AlertType type)
    {
        return type switch
        {
            AlertType.Danger => MessageIntent.Error,
            AlertType.Default => MessageIntent.Info,
            AlertType.Info => MessageIntent.Info,
            AlertType.Warning => MessageIntent.Warning,
            AlertType.Success => MessageIntent.Success,
            _ => MessageIntent.Info
        };
    }
    

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AlertManager.Alerts.CollectionChanged += Alerts_CollectionChanged;
        NavigationManager.LocationChanged += NavigationManager_LocationChanged;
        
        _messages.AddRange(AlertManager.Alerts);
    }
    
    private void NavigationManager_LocationChanged(object sender, LocationChangedEventArgs e)
    {
        AlertManager.Alerts.Clear();
        _messages.Clear();
    }

    protected virtual void Alerts_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.Action == NotifyCollectionChangedAction.Add)
        {
            foreach (var item in e.NewItems)
            {
                _messages.Add((AlertMessage)item);
            }
        }
        InvokeAsync(StateHasChanged);
    }
    
}
