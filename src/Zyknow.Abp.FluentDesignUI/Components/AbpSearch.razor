@using Localization.Resources.AbpUi
@using Microsoft.Extensions.Localization
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@inject IStringLocalizer<AbpUiResource> L
@inherits FluentComponentBase

<FluentStack VerticalAlignment="VerticalAlignment.Center" @attributes="AdditionalAttributes">
    @if (PrimaryInputVisible)
    {
        <FluentTextField Value="@PrimarySearchValue" ValueChanged="@PrimarySearchValueChanged"
                         Placeholder="@L["Search"]"></FluentTextField>
    }
    <FluentButton StopPropagation="true" Loading="@Loading" IconStart="@(new Size16.Search())"
                  Appearance="Appearance.Accent"
                  OnClick="@(async () => await OnSearch.InvokeAsync())">@L["Search"]</FluentButton>

    @if (ChildrenFilterToggleBtnVisible)
    {
        <FluentButton IconStart="@(ChildrenFilterVisible ? new Size20.ArrowAutofitUp() : new Size20.ArrowAutofitDown())"
                      OnClick="@(() => ChildrenFilterVisible = !ChildrenFilterVisible)"></FluentButton>
    }
    
    @if (ClearBtnVisible)
    {
        <FluentButton IconStart="@(new Size20.TextClearFormattingEn())" OnClick="@(() => ClearClick.InvokeAsync())"
                      StopPropagation="true"></FluentButton>
    }


</FluentStack>

@if (@ChildContent != null && ChildrenFilterVisible)
{
    @ChildContent
}

@code {

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public string PrimarySearchValue { get; set; }

    [Parameter] public EventCallback<string> PrimarySearchValueChanged { get; set; }

    [Parameter] public EventCallback OnSearch { get; set; }

    [Parameter] public bool Loading { get; set; }

    [Parameter] public bool PrimaryInputVisible { get; set; } = true;

    [Parameter] public bool ChildrenFilterToggleBtnVisible { get; set; } = false;

    [Parameter] public EventCallback ClearClick { get; set; }

    [Parameter] public bool ClearBtnVisible { get; set; } = false;

    [Parameter] public bool ChildrenFilterVisible { get; set; }

    [Parameter] public EventCallback<bool> ChildrenFilterVisibleChanged { get; set; }

}
