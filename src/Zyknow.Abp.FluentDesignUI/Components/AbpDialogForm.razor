@typeparam TInput
@using Localization.Resources.AbpUi
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Zyknow.Abp.FluentDesignUI.Validation
@implements IDialogContentComponent<TInput>
@inherits Volo.Abp.AspNetCore.Components.AbpComponentBase
@inject IStringLocalizer<AbpUiResource> UL
<FluentDialogHeader ShowDismiss="true">
    @if (Header != null)
    {
        @Header
    }
    else
    {
        <FluentLabel Typo="Typography.H4">@(IsConstHeader ? _constHeaderText : HeaderText)</FluentLabel>
    }
</FluentDialogHeader>

<FluentDialogBody>
    <FluentEditForm @ref="FormRef" Model="@Content">
        <AbpDataAnnotationsValidator Localize="@Localize" />
        @* <FluentValidationSummary/> *@
        @ChildContent
    </FluentEditForm>
</FluentDialogBody>

<FluentDialogFooter>
    @if (Footer != null)
    {
        @Footer
    }
    else
    {

        <FluentStack HorizontalAlignment="HorizontalAlignment.End">
            <FluentButton Loading="@Loading" Appearance="Appearance.Accent"
                          OnClick="@OnSubmitBtnClickAsync">@UL["Submit"]</FluentButton>
            <FluentButton Appearance="Appearance.Neutral"
                          OnClick="@OnCancelBtnClickAsync">@UL["Cancel"]</FluentButton>
        </FluentStack>
    }

</FluentDialogFooter>


<FluentOverlay @bind-Visible="@Loading" Transparent="false" Dismissable="false">
    <FluentProgressRing />
</FluentOverlay>

@code {

    [Parameter] public virtual string HeaderText { get; set; }
    [Parameter] public virtual RenderFragment? Header { get; set; }
    [Parameter] public bool IsConstHeader { get; set; }

    [Parameter] public virtual RenderFragment ChildContent { get; set; }

    [Parameter] public virtual RenderFragment? Footer { get; set; }


    [Parameter] public bool Loading { get; set; }
    [Parameter] public EventCallback<bool> LoadingChanged { get; set; }

    [Parameter] public TInput Content { get; set; }


    [CascadingParameter] public FluentDialog? Dialog { get; set; }

    [Parameter] public Func<Task<bool>> SubmitClick { get; set; }

    [Parameter] public EventCallback CancelClick { get; set; }

    [Parameter] public Func<string, IEnumerable<string>, string>? Localize { get; set; }


    string _constHeaderText;

    private FluentEditForm FormRef;

    protected override void OnInitialized()
    {
        if (IsConstHeader)
        {
            _constHeaderText = HeaderText;
        }
        base.OnInitialized();
    }

    protected virtual async Task OnSubmitBtnClickAsync()
    {
        try
        {
            Loading = true;
            var validate = true;
            if (FormRef != null)
            {
                validate = FormRef.EditContext.Validate();
            }

            if (validate)
            {
                var succeeded = await SubmitClick.Invoke();
                if (succeeded)
                    await Dialog?.CloseAsync();
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
        finally
        {
            Loading = false;
        }
    }

    protected virtual async Task OnCancelBtnClickAsync()
    {
        await CancelClick.InvokeAsync();
        await Dialog?.CloseAsync();
    }

}