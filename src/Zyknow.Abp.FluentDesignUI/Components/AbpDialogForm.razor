@typeparam TInput
@using Localization.Resources.AbpUi
@using Microsoft.Extensions.Localization
@using Zyknow.Abp.FluentDesignUI.Validation
@implements IDialogContentComponent<TInput>
@inherits Volo.Abp.AspNetCore.Components.AbpComponentBase
@inject IStringLocalizer<AbpUiResource> UL
@if (Dialog != null)
{
    <FluentDialogHeader ShowDismiss="true">
        @HeaderContentRender
    </FluentDialogHeader>
    <FluentDialogBody>
        @BodyContentRender
    </FluentDialogBody>

    <FluentDialogFooter>
        @FooterContentRender
    </FluentDialogFooter>
}
else
{
    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch" Width="100%">
        @HeaderContentRender
        @BodyContentRender
        @FooterContentRender
    </FluentStack>
}

<FluentOverlay @bind-Visible="@Loading" Transparent="false" Dismissable="false">
    <FluentProgressRing/>
</FluentOverlay>

@code {

    [Parameter] public virtual string HeaderText { get; set; }
    [Parameter] public virtual RenderFragment? Header { get; set; }
    [Parameter] public bool IsConstHeader { get; set; }

    [Parameter] public virtual RenderFragment ChildContent { get; set; }

    [Parameter] public virtual RenderFragment? Footer { get; set; }


    [Parameter] public bool Loading { get; set; }
    [Parameter] public EventCallback<bool> LoadingChanged { get; set; }

    [Parameter] public TInput Content { get; set; }


    [CascadingParameter] public FluentDialog? Dialog { get; set; }

    [Parameter] public Func<Task<bool>> SubmitValidClick { get; set; }

    [Parameter] public EventCallback SubmitClick { get; set; }

    [Parameter] public EventCallback CancelClick { get; set; }

    [Parameter] public Func<string, IEnumerable<string>, string>? Localize { get; set; }

    string _constHeaderText;

    private FluentEditForm FormRef;


    protected virtual RenderFragment HeaderContentRender => __builder =>
    {
        if (Header != null)
        {
            @Header
        }
        else
        {
            <FluentLabel Typo="Typography.H4">@(IsConstHeader ? _constHeaderText : HeaderText)</FluentLabel>
        }
    };

    protected virtual RenderFragment BodyContentRender => __builder =>
    {
        <FluentEditForm @ref="FormRef" Model="@Content">
            <AbpDataAnnotationsValidator Localize="@Localize"/>
            @* <FluentValidationSummary/> *@
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch">
                @ChildContent
            </FluentStack>
        </FluentEditForm>
    };

    protected virtual RenderFragment FooterContentRender => __builder =>
    {
        if (Footer != null)
        {
            @Footer
        }
        else
        {
            <FluentStack HorizontalAlignment="HorizontalAlignment.End">
                <FluentButton Loading="@Loading" Appearance="Appearance.Accent"
                              OnClick="@OnSubmitBtnClickAsync">@UL["Submit"]</FluentButton>

                @if (Dialog != null)
                {
                    <FluentButton Appearance="Appearance.Neutral"
                                  OnClick="@OnCancelBtnClickAsync">@UL["Cancel"]</FluentButton>
                }
            </FluentStack>
        }
    };


    protected override void OnInitialized()
    {
        if (IsConstHeader)
        {
            _constHeaderText = HeaderText;
        }

        base.OnInitialized();
    }

    public virtual async Task OnSubmitBtnClickAsync()
    {
        try
        {
            Loading = true;
            var validate = true;
            if (FormRef != null)
            {
                validate = FormRef.EditContext.Validate();
            }

            if (validate)
            {
                if (SubmitValidClick != null)
                {
                    var succeeded = await SubmitValidClick.Invoke();
                    if (succeeded)
                        await Dialog?.CloseAsync();
                }
                else
                {
                    if (SubmitClick.HasDelegate)
                    {
                        await SubmitClick.InvokeAsync();
                        if (Dialog != null)
                            await Dialog?.CloseAsync();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
        finally
        {
            Loading = false;
        }
    }

    public virtual async Task OnCancelBtnClickAsync()
    {
        await CancelClick.InvokeAsync();
        await Dialog?.CloseAsync();
    }

}