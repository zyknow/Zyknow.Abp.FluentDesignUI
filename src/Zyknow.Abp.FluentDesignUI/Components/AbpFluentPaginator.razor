@using Localization.Resources.AbpUi
@using Microsoft.Extensions.Localization
@using BlazorPro.BlazorSize
@using Zyknow.Abp.FluentDesignUI.FluentExtensions
@inject IStringLocalizer<AbpUiResource> UL
@inherits FluentComponentBase

@if (State != null)
{
    <MediaQuery Media="@Breakpoints.MediumDown">
        <Matched>
            <FluentStack HorizontalAlignment="HorizontalAlignment.Right"
                         VerticalAlignment="VerticalAlignment.Center">
                @if (ItemsPerPageStart != null)
                {
                    @ItemsPerPageStart
                }
                <FluentSelect
                    Width="180px"
                    OptionText="@(v => @UL["PagerShowMenuEntries"].Value.Replace("_MENU_", v.ToString()))"
                    Items="@ItemsPerPageList" SelectedOption="@State.ItemsPerPage"
                    TOption="int"
                    SelectedOptionChanged="@(v => State.SetItemsPerPageAsync(v))"></FluentSelect>
                @if (ItemsPerPageEnd != null)
                {
                    @ItemsPerPageEnd
                }
            </FluentStack>
        </Matched>
    </MediaQuery>

    <FluentStack Style="white-space: nowrap;" VerticalAlignment="VerticalAlignment.Center"
                 HorizontalAlignment="HorizontalAlignment.Stretch">
        <FluentLabel Typo="Typography.Body"
                     Weight="FontWeight.Bolder">@UL["Total"]: @State.TotalItemCount</FluentLabel>

        <FluentStack HorizontalAlignment="HorizontalAlignment.Right">
            <MediaQuery Media="@Breakpoints.MediumDown">
                <Unmatched>
                    <FluentStack HorizontalAlignment="HorizontalAlignment.Right"
                                 VerticalAlignment="VerticalAlignment.Center">
                        @if (ItemsPerPageStart != null)
                        {
                            @ItemsPerPageStart
                        }
                        <FluentSelect
                            Width="180px"
                            OptionText="@(v => @UL["PagerShowMenuEntries"].Value.Replace("_MENU_", v.ToString()))"
                            Items="@ItemsPerPageList" SelectedOption="@State.ItemsPerPage"
                            TOption="int"
                            SelectedOptionChanged="@(v => State.SetItemsPerPageAsync(v))"></FluentSelect>
                        @if (ItemsPerPageEnd != null)
                        {
                            @ItemsPerPageEnd
                        }
                    </FluentStack>
                </Unmatched>
            </MediaQuery>

            <FLuentPagination TotalCount="@(State.TotalItemCount ?? 0)" PageSize="@State.ItemsPerPage"
                              CurrentPage="@(State.CurrentPageIndex + 1)"
                              CurrentPageChanged="@(page => { State.SetCurrentPageIndexAsync(page - 1); })">
            </FLuentPagination>
        </FluentStack>

    </FluentStack>
}

@code {
    [Parameter] public PaginationState State { get; set; } = new();

    [Parameter] public List<int> ItemsPerPageList { get; set; } = [5, 10, 20, 50, 100, 1000];

    [Parameter] public RenderFragment ItemsPerPageStart { get; set; }
    [Parameter] public RenderFragment ItemsPerPageEnd { get; set; }

    [Parameter] public string WarpMaxWidth { get; set; } = "700px";
}

<style scoped>
    .paginator {
        .summary {
            margin-right: 20px;
            width: 100%;
        }
    }
</style>